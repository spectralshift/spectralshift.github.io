{"version":3,"file":"static/js/191.077bdc67.chunk.js","mappings":"0LAKA,MAiDA,EAjDgBA,KAmCZC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,GAAIC,UACtBJ,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGL,GAAI,CAAEM,GAAI,GAAIJ,SAnC3B,CACjB,CACEK,MAAO,qBACPC,YAAa,8HACbC,SAAU,gCAEf,CACKF,MAAO,2BACPC,YAAa,0EACbC,SAAU,8BAEd,CACIF,MAAO,gBACPC,YAAa,iGACbC,SAAU,gCAEd,CACIF,MAAO,uBACPC,YAAa,8CACbC,SAAU,gCAEd,CACIF,MAAO,2BACPC,YAAa,qHACbC,SAAU,gCAEd,CACIF,MAAO,qBACPC,YAAa,yJACbC,SAAU,mCAOMC,KAAI,CAACC,EAAMC,KACvBd,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACU,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEd,UAC9BJ,EAAAA,EAAAA,KAACmB,EAAAA,EAAI,IAAKN,KAD0BC,Q,uFCxChD,MA2EA,EA3EaM,IAAuC,IAAtC,MAAEX,EAAK,YAAEC,EAAW,SAAEC,GAAUS,EAC5C,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GAE3C,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJC,UAAW,EACXxB,GAAI,CACFyB,MAAO,OACPC,OAAQ,QACRC,QAAS,OACTC,SAAU,SACVC,SAAU,WACVC,WAAY,oBACZC,OAAQ,WAEVC,aAAcA,IAAMZ,GAAa,GACjCa,aAAcA,IAAMb,GAAa,GAAOlB,SAAA,EAGxCJ,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CACFC,GAAI,CACFyB,MAAO,MACPC,OAAQ,OACRC,QAAS,OACTO,WAAY,SACZC,eAAgB,SAChBC,QAAS,aACTlC,UAEFJ,EAAAA,EAAAA,KAAA,OACEuC,IAAK5B,EACL6B,IAAK/B,EACLgC,MAAO,CAAEC,SAAU,OAAQC,UAAW,OAAQC,UAAW,gBAK7DpB,EAAAA,EAAAA,MAACvB,EAAAA,EAAG,CACFC,GAAI,CACFyB,MAAO,MACPC,OAAQ,OACRC,QAAS,OACTgB,cAAe,SACf1C,QAAS,EACT4B,SAAU,YACV3B,SAAA,EAEFJ,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,CACTC,QAAQ,KACR7C,GAAI,CACF6B,SAAU,WACViB,IAAK3B,EAAY,MAAQ,MACzB4B,UAAW5B,EAAY,gBAAkB,mBACzCW,WAAY,qBACZ5B,SAEDK,KAEHT,EAAAA,EAAAA,KAAC8C,EAAAA,EAAU,CACTC,QAAQ,QACR7C,GAAI,CACFgD,QAAS7B,EAAY,EAAI,EACzB8B,WAAY9B,EAAY,UAAY,SACpCW,WAAY,6BACZD,SAAU,WACViB,IAAK,QACL5C,SAEDM,SAGC,C","sources":["pages/CivIdle.js","pages/Tile.js"],"sourcesContent":["import React from 'react';\r\nimport { Grid, Box } from '@mui/material';\r\nimport Tile from './Tile';\r\n\r\n\r\nconst CivIdle = () => {\r\nconst civIdleTiles = [\r\n    { \r\n      title: 'Science Calculator', \r\n      description: \"Quickly calculate how long it will take to generate (x) science at a certain rate. Useful for knowing how long to idle for!\",\r\n      imageSrc: '/images/cividle/sci-calc.png'\r\n    },\r\n\t{ \r\n      title: 'GP Efficiency Calculator', \r\n      description: \"Find out when is the best time to rebirth during your Empire Value run!\",\r\n      imageSrc: '/images/cividle/gp-eff.png'\r\n    },\r\n\t\t{ \r\n      title: 'Idle Era Time', \r\n      description: \"Want to do a lot of short runs? This tells you the time it takes to get to each era while afk!\",\r\n      imageSrc: '/images/cividle/idle-era.png'\r\n    },\r\n\t\t{ \r\n      title: 'Goods: Empire Values', \r\n      description: \"A list of the EV of every item in the game.\",\r\n      imageSrc: '/images/cividle/ev-value.png'\r\n    },\r\n\t\t{ \r\n      title: 'Product Chain Calculator', \r\n      description: \"Figuring out how many buildings and products you need is hard! Here is a calculator that should help calculate it!\",\r\n      imageSrc: '/images/cividle/prodcalc.png'\r\n    },\r\n\t\t{ \r\n      title: 'Workers vs Science', \r\n      description: \"Should I go for science buildings or should I go for workers to get science? Covers Aparments and Condos vs Schools, Research Labs, and Computer Labs.\",\r\n      imageSrc: '/images/cividle/sci-worker.png'\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Box sx={{ padding: 4 }}>\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        {civIdleTiles.map((tile, index) => (\r\n          <Grid item xs={12} sm={6} md={4} key={index}>\r\n            <Tile {...tile} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      \r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CivIdle;","import React, { useState } from 'react';\r\nimport { Paper, Typography, Box } from '@mui/material';\r\n\r\nconst Tile = ({ title, description, imageSrc }) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  return (\r\n    <Paper\r\n      elevation={3}\r\n      sx={{\r\n        width: '100%',\r\n        height: '150px',\r\n        display: 'flex',\r\n        overflow: 'hidden',\r\n        position: 'relative',\r\n        transition: 'all 0.2s ease-out',\r\n        cursor: 'pointer',\r\n      }}\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n    >\r\n      {/* Image Section */}\r\n      <Box\r\n        sx={{\r\n          width: '33%',\r\n          height: '100%',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          bgcolor: 'LightGray',\r\n        }}\r\n      >\r\n        <img \r\n          src={imageSrc} \r\n          alt={title}\r\n          style={{ maxWidth: '100%', maxHeight: '100%', objectFit: 'contain' }}\r\n        />\r\n      </Box>\r\n\r\n      {/* Content Section */}\r\n      <Box\r\n        sx={{\r\n          width: '67%',\r\n          height: '100%',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          padding: 2,\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <Typography\r\n          variant=\"h6\"\r\n          sx={{\r\n            position: 'absolute',\r\n            top: isHovered ? '2px' : '50%',\r\n            transform: isHovered ? 'translateY(0)' : 'translateY(-50%)',\r\n            transition: 'all 0.2s ease-out',\r\n          }}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        <Typography\r\n          variant=\"body2\"\r\n          sx={{\r\n            opacity: isHovered ? 1 : 0,\r\n            visibility: isHovered ? 'visible' : 'hidden',\r\n            transition: 'opacity 0.2s ease-out 0.1s',\r\n            position: 'absolute',\r\n            top: '40px',\r\n          }}\r\n        >\r\n          {description}\r\n        </Typography>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Tile;"],"names":["CivIdle","_jsx","Box","sx","padding","children","Grid","container","spacing","mb","title","description","imageSrc","map","tile","index","item","xs","sm","md","Tile","_ref","isHovered","setIsHovered","useState","_jsxs","Paper","elevation","width","height","display","overflow","position","transition","cursor","onMouseEnter","onMouseLeave","alignItems","justifyContent","bgcolor","src","alt","style","maxWidth","maxHeight","objectFit","flexDirection","Typography","variant","top","transform","opacity","visibility"],"sourceRoot":""}