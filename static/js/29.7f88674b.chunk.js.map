{"version":3,"file":"static/js/29.7f88674b.chunk.js","mappings":"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","sources":["pages/cividle/ScienceBuildVsWorker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  TextField,\r\n  Checkbox,\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Box,\r\n  FormControlLabel,\r\n} from '@mui/material';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nconst ScienceBuildVsWorker = () => {\r\n  const [idleScience, setIdleScience] = useState('');\r\n  const [happinessBudget, setHappinessBudget] = useState('');\r\n  const [schoolBonus, setSchoolBonus] = useState('');\r\n  const [researchLabsBonus, setResearchLabsBonus] = useState('');\r\n  const [computerLabsBonus, setComputerLabsBonus] = useState('');\r\n  const [researchFundsBonus, setResearchFundsBonus] = useState('');\r\n  const [pyramidOfGiza, setPyramidOfGiza] = useState(false);\r\n  const [shendoahTower, setShendoahTower] = useState(false);\r\n  const [cnTower, setCNTower] = useState(false);\r\n  const [unitedNations, setUnitedNations] = useState(false);\r\n  const [socialism, setSocialism] = useState(false);\r\n  const [expansion, setExpansion] = useState(false);\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    apartmentsVsSchools: [],\r\n    condosVsResearchLabs: [],\r\n    condosVsResearchFunds: [],\r\n  });\r\n\r\n  const [results, setResults] = useState({\r\n    rSchools: 0,\r\n    rLabs: 0,\r\n    cLabs: 0,\r\n    rFunds: 0,\r\n    apartments: 0,\r\n    condos: 0,\r\n  });\r\n\r\n  const calculateResults = (increment = 0) => {\r\n    const wonderValues = {\r\n      rSchools: {\r\n        pyramidOfGiza: 0,\r\n        shendoahTower: 2,\r\n        cnTower: 0,\r\n        unitedNations: 1,\r\n        socialism: 0,\r\n        expansion: 0,\r\n      },\r\n      rLabs: {\r\n        pyramidOfGiza: 0,\r\n        shendoahTower: 2,\r\n        cnTower: 0,\r\n        unitedNations: 1,\r\n        socialism: 3,\r\n        expansion: 0,\r\n      },\r\n      cLabs: {\r\n        pyramidOfGiza: 0,\r\n        shendoahTower: 2,\r\n        cnTower: 4,\r\n        unitedNations: 1,\r\n        socialism: 0,\r\n        expansion: 0,\r\n      },\r\n      rFunds: {\r\n        pyramidOfGiza: 0,\r\n        shendoahTower: 2,\r\n        cnTower: 4,\r\n        unitedNations: 1,\r\n        socialism: 0,\r\n        expansion: 0,\r\n      },\r\n      apartments: {\r\n        pyramidOfGiza: 1,\r\n        shendoahTower: 2,\r\n        cnTower: 0,\r\n        unitedNations: 0,\r\n        socialism: 0,\r\n        expansion: 1,\r\n      },\r\n      condos: {\r\n        pyramidOfGiza: 1,\r\n        shendoahTower: 2,\r\n        cnTower: 4,\r\n        unitedNations: 1,\r\n        socialism: 0,\r\n        expansion: 0,\r\n      },\r\n    };\r\n\r\n    const calculateWonderBonus = (type) => {\r\n      return (pyramidOfGiza ? wonderValues[type].pyramidOfGiza : 0) +\r\n             (shendoahTower ? wonderValues[type].shendoahTower : 0) +\r\n             (cnTower ? wonderValues[type].cnTower : 0) +\r\n             (unitedNations ? wonderValues[type].unitedNations : 0) +\r\n             (socialism ? wonderValues[type].socialism : 0) +\r\n             (expansion ? wonderValues[type].expansion : 0);\r\n    };\r\n    const happinessBudgetValue = parseFloat(happinessBudget) || 100;\r\n    const happiness = Math.max(-50, Math.min(50, happinessBudgetValue - increment));\r\n    const happinessMultiplier = 1 + (0.02 * happiness);\r\n\t\r\n    return {\r\n      rSchools: (parseFloat(schoolBonus) + 3 + calculateWonderBonus('rSchools')) * 400 * increment,\r\n      rLabs: (parseFloat(researchLabsBonus) + 2 + calculateWonderBonus('rLabs')) * 5000 * increment,\r\n      cLabs: (parseFloat(computerLabsBonus) + 1 + calculateWonderBonus('cLabs')) * 79930 * increment,\r\n      rFunds: (parseFloat(researchFundsBonus) + 2 + calculateWonderBonus('rFunds')) * 25940 * increment,\r\n      apartments: ( 1 + calculateWonderBonus('apartments')) * 84 * parseFloat(idleScience) * happinessMultiplier * increment,\r\n      condos: ( 1 + calculateWonderBonus('condos')) * 510 * parseFloat(idleScience) * happinessMultiplier * increment,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n   setResults(calculateResults(1)); // Set initial results for 1 building\r\n\r\n    const happinessBudgetValue = parseFloat(happinessBudget) || 100;\r\n    const maxBuildings = happinessBudgetValue + 50;\r\n    const newGraphData = {\r\n      apartmentsVsSchools: [],\r\n      condosVsResearchLabs: [],\r\n      condosVsComputerLabs: [],\r\n\t  condosVsResearchFunds: [],\r\n    };\r\n\r\nfor (let i = 0; i <= maxBuildings; i++) {\r\n      const results = calculateResults(i);\r\n\r\n      newGraphData.apartmentsVsSchools.push({\r\n        buildings: i,\r\n        apartments: results.apartments,\r\n        schools: results.rSchools,\r\n      });\r\n\r\n      newGraphData.condosVsResearchLabs.push({\r\n        buildings: i,\r\n        condos: results.condos,\r\n        researchLabs: results.rLabs,\r\n      });\r\n\t  \r\n\t  newGraphData.condosVsComputerLabs.push({\r\n        buildings: i,\r\n        condos: results.condos,\r\n        computerLabs: results.cLabs,\r\n      });\r\n\t  \r\n\r\n      newGraphData.condosVsResearchFunds.push({\r\n        buildings: i,\r\n        condos: results.condos,\r\n        researchFunds: results.rFunds,\r\n      });\r\n    }\r\n\r\n    setGraphData(newGraphData);\r\n  }, [idleScience, happinessBudget, schoolBonus, researchLabsBonus, computerLabsBonus, researchFundsBonus, pyramidOfGiza, shendoahTower, cnTower, unitedNations, socialism, expansion]);\r\n\r\n  const renderGraph = (data, title, line1Name, line2Name) => (\r\n    <Box sx={{ mt: 4 }}>\r\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <LineChart data={data} margin={{ top: 10, right: 20, left: 20, bottom: 15 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"buildings\" \r\n            label={{ value: 'Building Count', position: 'insideBottom', offset: -5 }} \r\n\t\t\tinterval = {24}\r\n          />\r\n          <YAxis label={{ value: 'Total Science', angle: -90, position: 'insideLeft' }} />\r\n          <Tooltip />\r\n          <Legend verticalAlign=\"top\" height={36}/>\r\n          <Line type=\"monotone\" dataKey={line1Name} stroke=\"#8884d8\" dot={false}/>\r\n          <Line type=\"monotone\" dataKey={line2Name} stroke=\"#82ca9d\" dot={false}/>\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ p: 3, maxWidth: 800, mx: 'auto' }}>\r\n      <Typography variant=\"h4\" gutterBottom>Science Build vs Worker Calculator</Typography>\r\n      <Box sx={{ mb: 3, bgcolor: 'background.paper', p: 2, borderRadius: 1 }}>\r\n\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Idle Science / sec</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={idleScience}\r\n                  onChange={(e) => setIdleScience(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 9999.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Happiness Budget</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={happinessBudget}\r\n                  onChange={(e) => setHappinessBudget(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 1, min: 0, max: 999 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">School Bonus</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={schoolBonus}\r\n                  onChange={(e) => setSchoolBonus(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 99.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Research Labs Bonus</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={researchLabsBonus}\r\n                  onChange={(e) => setResearchLabsBonus(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 99.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Computer Labs Bonus</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={computerLabsBonus}\r\n                  onChange={(e) => setComputerLabsBonus(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 99.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Research Funds Bonus</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={researchFundsBonus}\r\n                  onChange={(e) => setResearchFundsBonus(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 99.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Box sx={{ mt: 3 }}>\r\n          <Typography variant=\"subtitle1\" fontWeight=\"medium\" gutterBottom>Wonders and Policies</Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={pyramidOfGiza} onChange={(e) => setPyramidOfGiza(e.target.checked)} />}\r\n                label=\"Pyramid of Giza\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={shendoahTower} onChange={(e) => setShendoahTower(e.target.checked)} />}\r\n                label=\"Shendoah/Tower of Babel\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={cnTower} onChange={(e) => setCNTower(e.target.checked)} />}\r\n                label=\"CN Tower\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={unitedNations} onChange={(e) => setUnitedNations(e.target.checked)} />}\r\n                label=\"United Nations\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={socialism} onChange={(e) => setSocialism(e.target.checked)} />}\r\n                label=\"Ideology: Socialism\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={expansion} onChange={(e) => setExpansion(e.target.checked)} />}\r\n                label=\"Tradition: Expansion\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n      \r\n      <Box sx={{ mt: 4 }}>\r\n        <Typography variant=\"h6\" gutterBottom>Calculation Results (for 1 building)</Typography>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={6}>\r\n            <Typography>Schools: {results.rSchools.toFixed(0)}</Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography>Research Labs: {results.rLabs.toFixed(0)}</Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography>Computer Labs: {results.cLabs.toFixed(0)}</Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography>Research Funds: {results.rFunds.toFixed(0)}</Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography>Apartments: {results.apartments.toFixed(0)}</Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography>Condos: {results.condos.toFixed(0)}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      {renderGraph(graphData.apartmentsVsSchools, \"Apartments vs Schools\", \"apartments\", \"schools\")}\r\n      {renderGraph(graphData.condosVsResearchLabs, \"Condos vs Research Labs\", \"condos\", \"researchLabs\")}\r\n\t  {renderGraph(graphData.condosVsComputerLabs, \"Condos vs Computer Labs\", \"condos\", \"computerLabs\")}\r\n      {renderGraph(graphData.condosVsResearchFunds, \"Condos vs Research Funds\", \"condos\", \"researchFunds\")}\r\n\t  \r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ScienceBuildVsWorker;"],"names":["ScienceBuildVsWorker","idleScience","setIdleScience","useState","happinessBudget","setHappinessBudget","schoolBonus","setSchoolBonus","researchLabsBonus","setResearchLabsBonus","computerLabsBonus","setComputerLabsBonus","researchFundsBonus","setResearchFundsBonus","pyramidOfGiza","setPyramidOfGiza","shendoahTower","setShendoahTower","cnTower","setCNTower","unitedNations","setUnitedNations","socialism","setSocialism","expansion","setExpansion","graphData","setGraphData","apartmentsVsSchools","condosVsResearchLabs","condosVsResearchFunds","results","setResults","rSchools","rLabs","cLabs","rFunds","apartments","condos","calculateResults","increment","arguments","length","undefined","wonderValues","calculateWonderBonus","type","happinessBudgetValue","parseFloat","happinessMultiplier","Math","max","min","useEffect","maxBuildings","newGraphData","condosVsComputerLabs","i","push","buildings","schools","researchLabs","computerLabs","researchFunds","renderGraph","data","title","line1Name","line2Name","_jsxs","Box","sx","mt","children","_jsx","Typography","variant","gutterBottom","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","label","value","position","offset","interval","YAxis","angle","Tooltip","Legend","verticalAlign","Line","stroke","dot","Paper","elevation","p","maxWidth","mx","mb","bgcolor","borderRadius","Grid","container","spacing","item","xs","sm","alignItems","fontWeight","TextField","onChange","e","target","size","fullWidth","inputProps","step","FormControlLabel","control","Checkbox","checked","toFixed"],"sourceRoot":""}