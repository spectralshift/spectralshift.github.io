{"version":3,"file":"static/js/29.e8b30a51.chunk.js","mappings":"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","sources":["components/PageHeader.js","pages/cividle/ScienceBuildVsWorker.js"],"sourcesContent":["// src/components/PageHeader.js\r\nimport React from 'react';\r\nimport { Typography, Box } from '@mui/material';\r\n\r\nconst PageHeader = ({ title, description }) => {\r\n  return (\r\n    <Box sx={{ mb: 4 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      {description && (\r\n        <Typography \r\n          variant=\"subtitle1\" \r\n          sx={{ \r\n            mb: 3, \r\n            fontStyle: 'italic',\r\n            color: 'text.secondary',\r\n            borderLeft: '4px solid',\r\n            borderColor: 'primary.main',\r\n            pl: 2\r\n          }}\r\n        >\r\n          {description}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PageHeader;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  TextField,\r\n  Checkbox,\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Box,\r\n  FormControlLabel,\r\n} from '@mui/material';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport PageHeader from '../../components/PageHeader';\r\n\r\nconst PAGE_TITLE = \"Idle Science vs Science Buildings\";\r\nconst PAGE_DESCRIPTION = \"This calculator compares Idle Science buildings (Apartments, Condos) against science buildings. The graphs will show the peak science over a range of buildings built. The result is a ratio between the two buildings. Use this calculator to compare different build options at different stages of the game. Note that this does not currently account for bonuses that are not global, such as Sagrada and Statue of Liberty.\"\r\n\r\n\r\n\r\nconst ScienceBuildVsWorker = () => {\r\n  const [idleScience, setIdleScience] = useState('');\r\n  const [happinessBudget, setHappinessBudget] = useState('');\r\n  const [schoolBonus, setSchoolBonus] = useState('');\r\n  const [researchLabsBonus, setResearchLabsBonus] = useState('');\r\n  const [computerLabsBonus, setComputerLabsBonus] = useState('');\r\n  const [researchFundsBonus, setResearchFundsBonus] = useState('');\r\n  const [pyramidOfGiza, setPyramidOfGiza] = useState(false);\r\n  const [shendoahTower, setShendoahTower] = useState(false);\r\n  const [cnTower, setCNTower] = useState(false);\r\n  const [unitedNations, setUnitedNations] = useState(false);\r\n  const [socialism, setSocialism] = useState(false);\r\n  const [expansion, setExpansion] = useState(false);\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    apartmentsVsSchools: [],\r\n\tapartmentsVsResearchLabs: [],\r\n    condosVsResearchLabs: [],\r\n    condosVsResearchFunds: [],\r\n  });\r\n\r\n  const [results, setResults] = useState({\r\n    rSchools: 0,\r\n    rLabs: 0,\r\n    cLabs: 0,\r\n    rFunds: 0,\r\n    apartments: 0,\r\n    condos: 0,\r\n  });\r\n\r\n  const calculateResults = (increment = 0) => {\r\n    const wonderValues = {\r\n      rSchools: {\r\n        pyramidOfGiza: 0,\r\n        shendoahTower: 2,\r\n        cnTower: 0,\r\n        unitedNations: 1,\r\n        socialism: 0,\r\n        expansion: 0,\r\n      },\r\n      rLabs: {\r\n        pyramidOfGiza: 0,\r\n        shendoahTower: 2,\r\n        cnTower: 0,\r\n        unitedNations: 1,\r\n        socialism: 3,\r\n        expansion: 0,\r\n      },\r\n      cLabs: {\r\n        pyramidOfGiza: 0,\r\n        shendoahTower: 2,\r\n        cnTower: 4,\r\n        unitedNations: 1,\r\n        socialism: 0,\r\n        expansion: 0,\r\n      },\r\n      rFunds: {\r\n        pyramidOfGiza: 0,\r\n        shendoahTower: 2,\r\n        cnTower: 4,\r\n        unitedNations: 1,\r\n        socialism: 0,\r\n        expansion: 0,\r\n      },\r\n      apartments: {\r\n        pyramidOfGiza: 1,\r\n        shendoahTower: 2,\r\n        cnTower: 0,\r\n        unitedNations: 0,\r\n        socialism: 0,\r\n        expansion: 1,\r\n      },\r\n      condos: {\r\n        pyramidOfGiza: 1,\r\n        shendoahTower: 2,\r\n        cnTower: 4,\r\n        unitedNations: 1,\r\n        socialism: 0,\r\n        expansion: 0,\r\n      },\r\n    };\r\n\r\n    const calculateWonderBonus = (type) => {\r\n      return (pyramidOfGiza ? wonderValues[type].pyramidOfGiza : 0) +\r\n             (shendoahTower ? wonderValues[type].shendoahTower : 0) +\r\n             (cnTower ? wonderValues[type].cnTower : 0) +\r\n             (unitedNations ? wonderValues[type].unitedNations : 0) +\r\n             (socialism ? wonderValues[type].socialism : 0) +\r\n             (expansion ? wonderValues[type].expansion : 0);\r\n    };\r\n    const happinessBudgetValue = parseFloat(happinessBudget) || 100;\r\n    const happiness = Math.max(-50, Math.min(50, happinessBudgetValue - increment));\r\n    const happinessMultiplier = 1 + (0.02 * happiness);\r\n\t\r\n    return {\r\n      rSchools: (parseFloat(schoolBonus) + 3 + calculateWonderBonus('rSchools')) * 400 * increment,\r\n      rLabs: (parseFloat(researchLabsBonus) + 2 + calculateWonderBonus('rLabs')) * 7500 * increment,\r\n      cLabs: (parseFloat(computerLabsBonus) + 1 + calculateWonderBonus('cLabs')) * 79930 * increment,\r\n      rFunds: (parseFloat(researchFundsBonus) + 2 + calculateWonderBonus('rFunds')) * 25940 * increment,\r\n      apartments: ( 1 + calculateWonderBonus('apartments')) * 84 * parseFloat(idleScience) * happinessMultiplier * increment,\r\n      condos: ( 1 + calculateWonderBonus('condos')) * 510 * parseFloat(idleScience) * happinessMultiplier * increment,\r\n    };\r\n  };\r\n\r\n useEffect(() => {\r\n  setResults(calculateResults(1)); // Set initial results for 1 building\r\n\r\n  const happinessBudgetValue = parseFloat(happinessBudget) || 100;\r\n  const maxBuildings = happinessBudgetValue + 50;\r\n  const newGraphData = {\r\n    apartmentsVsSchools: [],\r\n\tapartmentsVsResearchLabs: [],\r\n    condosVsResearchLabs: [],\r\n    condosVsComputerLabs: [],\r\n    condosVsResearchFunds: [],\r\n  };\r\n\r\n  // Calculate raw data and find max values for each graph\r\n  const maxValues = {\r\n    apartmentsVsSchools: 0,\r\n\tapartmentsVsResearchLabs: 0,\r\n    condosVsResearchLabs: 0,\r\n    condosVsComputerLabs: 0,\r\n    condosVsResearchFunds: 0,\r\n  };\r\n\r\n  for (let i = 0; i <= maxBuildings; i++) {\r\n    const results = calculateResults(i);\r\n    \r\n\tconst apartmentsValue = Math.max(0, results.apartments);\r\n\tconst schoolsValue = Math.max(0, results.rSchools);\r\n\tconst condosValue = Math.max(0, results.condos);\r\n\tconst researchLabsValue = Math.max(0, results.rLabs);\r\n\tconst computerLabsValue = Math.max(0, results.cLabs);\r\n\tconst researchFundsValue = Math.max(0, results.rFunds);\r\n\t\r\n    maxValues.apartmentsVsSchools = Math.max(maxValues.apartmentsVsSchools, apartmentsValue, schoolsValue);\r\n\r\n    maxValues.apartmentsVsResearchLabs = Math.max(maxValues.apartmentsVsResearchLabs, apartmentsValue, researchLabsValue);\r\n\t\r\n    maxValues.condosVsResearchLabs = Math.max(maxValues.condosVsResearchLabs, condosValue, researchLabsValue);\r\n\r\n    maxValues.condosVsComputerLabs = Math.max(maxValues.condosVsComputerLabs, condosValue, computerLabsValue);\r\n\r\n    maxValues.condosVsResearchFunds = Math.max(maxValues.condosVsResearchFunds, condosValue, researchFundsValue);\r\n\r\n    // Store raw data\r\n    newGraphData.apartmentsVsSchools.push({\r\n      buildings: i,\r\n      apartments: apartmentsValue,\r\n      schools: schoolsValue,\r\n    });\r\n\t\r\n\tnewGraphData.apartmentsVsResearchLabs.push({\r\n      buildings: i,\r\n      apartments: apartmentsValue,\r\n      researchLabs: researchLabsValue,\r\n    });\r\n\r\n    newGraphData.condosVsResearchLabs.push({\r\n      buildings: i,\r\n      condos: condosValue,\r\n      researchLabs: researchLabsValue,\r\n    });\r\n\r\n    newGraphData.condosVsComputerLabs.push({\r\n      buildings: i,\r\n      condos: condosValue,\r\n      computerLabs: computerLabsValue,\r\n    });\r\n\r\n    newGraphData.condosVsResearchFunds.push({\r\n      buildings: i,\r\n      condos: condosValue,\r\n      researchFunds: researchFundsValue,\r\n    });\r\n  }\r\n\r\n  // Normalize data for each graph separately\r\n  Object.keys(newGraphData).forEach(graphKey => {\r\n    newGraphData[graphKey] = newGraphData[graphKey].map(data => {\r\n      const normalizedData = { buildings: data.buildings };\r\n      Object.keys(data).forEach(key => {\r\n        if (key !== 'buildings') {\r\n          normalizedData[key] = data[key] / maxValues[graphKey];\r\n        }\r\n      });\r\n      return normalizedData;\r\n    });\r\n  });\r\n\r\n  setGraphData(newGraphData);\r\n}, [idleScience, happinessBudget, schoolBonus, researchLabsBonus, computerLabsBonus, researchFundsBonus, pyramidOfGiza, shendoahTower, cnTower, unitedNations, socialism, expansion]);\r\n\r\nconst renderGraph = (data, title, line1Name, line2Name) => (\r\n  <Box sx={{ mt: 4 }}>\r\n    <Typography variant=\"h6\" gutterBottom>{title}</Typography>\r\n    <ResponsiveContainer width=\"100%\" height={300}>\r\n      <LineChart data={data} margin={{ top: 10, right: 20, left: 20, bottom: 15 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis \r\n          dataKey=\"buildings\" \r\n          label={{ value: 'Building Count', position: 'insideBottom', offset: -5 }} \r\n          interval={24}\r\n        />\r\n        <YAxis \r\n          label={{ value: 'Normalized Science', angle: -90, position: 'insideLeft', dy: 60}}\r\n          domain={[0, 1]}\r\n          ticks={[0, 0.25, 0.5, 0.75, 1]}\r\n        />\r\n        <Tooltip \r\n          formatter={(value) => value.toFixed(4)}\r\n        />\r\n        <Legend verticalAlign=\"top\" height={36}/>\r\n        <Line type=\"monotone\" dataKey={line1Name} stroke=\"#8884d8\" dot={false}/>\r\n        <Line type=\"monotone\" dataKey={line2Name} stroke=\"#82ca9d\" dot={false}/>\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  </Box>\r\n);\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ p: 3, maxWidth: 800, mx: 'auto' }}>\r\n      <PageHeader title={PAGE_TITLE} description={PAGE_DESCRIPTION} />\r\n      <Box sx={{ mb: 3, bgcolor: 'background.paper', p: 2, borderRadius: 1 }}>\r\n\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Idle Science / sec</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={idleScience}\r\n                  onChange={(e) => setIdleScience(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 9999.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Happiness Budget</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={happinessBudget}\r\n                  onChange={(e) => setHappinessBudget(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 1, min: 0, max: 999 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">School Bonus</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={schoolBonus}\r\n                  onChange={(e) => setSchoolBonus(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 99.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Research Labs Bonus</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={researchLabsBonus}\r\n                  onChange={(e) => setResearchLabsBonus(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 99.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Computer Labs Bonus</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={computerLabsBonus}\r\n                  onChange={(e) => setComputerLabsBonus(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 99.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Grid container spacing={1} alignItems=\"center\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"medium\">Research Funds Bonus</Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <TextField\r\n                  type=\"number\"\r\n                  value={researchFundsBonus}\r\n                  onChange={(e) => setResearchFundsBonus(e.target.value)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  inputProps={{ step: 0.1, min: 0, max: 99.9 }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Box sx={{ mt: 3 }}>\r\n          <Typography variant=\"subtitle1\" fontWeight=\"medium\" gutterBottom>Wonders and Policies</Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={pyramidOfGiza} onChange={(e) => setPyramidOfGiza(e.target.checked)} />}\r\n                label=\"Pyramid of Giza\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={shendoahTower} onChange={(e) => setShendoahTower(e.target.checked)} />}\r\n                label=\"Shendoah/Tower of Babel\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={cnTower} onChange={(e) => setCNTower(e.target.checked)} />}\r\n                label=\"CN Tower\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={unitedNations} onChange={(e) => setUnitedNations(e.target.checked)} />}\r\n                label=\"United Nations\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={socialism} onChange={(e) => setSocialism(e.target.checked)} />}\r\n                label=\"Ideology: Socialism\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControlLabel\r\n                control={<Checkbox checked={expansion} onChange={(e) => setExpansion(e.target.checked)} />}\r\n                label=\"Tradition: Expansion\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n      \r\n      \r\n      {renderGraph(graphData.apartmentsVsSchools, \"Apartments vs Schools\", \"apartments\", \"schools\")}\r\n\t  {renderGraph(graphData.apartmentsVsResearchLabs, \"Apartments vs Research Labs\", \"apartments\", \"researchLabs\")}\r\n      {renderGraph(graphData.condosVsResearchLabs, \"Condos vs Research Labs\", \"condos\", \"researchLabs\")}\r\n\t  {renderGraph(graphData.condosVsComputerLabs, \"Condos vs Computer Labs\", \"condos\", \"computerLabs\")}\r\n      {renderGraph(graphData.condosVsResearchFunds, \"Condos vs Research Funds\", \"condos\", \"researchFunds\")}\r\n\t  \r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ScienceBuildVsWorker;"],"names":["_ref","title","description","_jsxs","Box","sx","mb","children","_jsx","Typography","variant","gutterBottom","fontStyle","color","borderLeft","borderColor","pl","ScienceBuildVsWorker","idleScience","setIdleScience","useState","happinessBudget","setHappinessBudget","schoolBonus","setSchoolBonus","researchLabsBonus","setResearchLabsBonus","computerLabsBonus","setComputerLabsBonus","researchFundsBonus","setResearchFundsBonus","pyramidOfGiza","setPyramidOfGiza","shendoahTower","setShendoahTower","cnTower","setCNTower","unitedNations","setUnitedNations","socialism","setSocialism","expansion","setExpansion","graphData","setGraphData","apartmentsVsSchools","apartmentsVsResearchLabs","condosVsResearchLabs","condosVsResearchFunds","results","setResults","rSchools","rLabs","cLabs","rFunds","apartments","condos","calculateResults","increment","arguments","length","undefined","wonderValues","calculateWonderBonus","type","happinessBudgetValue","parseFloat","happinessMultiplier","Math","max","min","useEffect","maxBuildings","newGraphData","condosVsComputerLabs","maxValues","i","apartmentsValue","schoolsValue","condosValue","researchLabsValue","computerLabsValue","researchFundsValue","push","buildings","schools","researchLabs","computerLabs","researchFunds","Object","keys","forEach","graphKey","map","data","normalizedData","key","renderGraph","line1Name","line2Name","mt","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","label","value","position","offset","interval","YAxis","angle","dy","domain","ticks","Tooltip","formatter","toFixed","Legend","verticalAlign","Line","stroke","dot","Paper","elevation","p","maxWidth","mx","PageHeader","bgcolor","borderRadius","Grid","container","spacing","item","xs","sm","alignItems","fontWeight","TextField","onChange","e","target","size","fullWidth","inputProps","step","FormControlLabel","control","Checkbox","checked"],"sourceRoot":""}