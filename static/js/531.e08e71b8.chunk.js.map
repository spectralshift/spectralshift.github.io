{"version":3,"file":"static/js/531.e08e71b8.chunk.js","mappings":"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","sources":["pages/cividle/productChainUtils.js","pages/cividle/ProductChainGraph.js","pages/cividle/ProductChainCalc.js"],"sourcesContent":["import { BuildingData, ChainNode, ProductChainState } from './productChainTypes';\r\n\r\nexport function buildGraph(buildingsData: BuildingData[]): Map<string, BuildingData> {\r\n  return new Map(buildingsData.map(building => [building.id, building]));\r\n}\r\n/* The original, unique version, that did not add correctly.\r\nexport function calculateResourceFlow(\r\n  graph,\r\n  selectedBuilding,\r\n  multipliers,\r\n  globalBuff,\r\n  buildingCount,\r\n  buildingLevel\r\n) {\r\n  const result = [];\r\n  const queue = [[selectedBuilding, buildingCount * buildingLevel, null]];\r\n  const visited = new Set();\r\n\r\n  while (queue.length > 0) {\r\n    const [currentBuildingId, requiredLevels, parentId] = queue.shift();\r\n    if (visited.has(currentBuildingId)) continue;\r\n    visited.add(currentBuildingId);\r\n\r\n    const building = graph.get(currentBuildingId);\r\n    if (!building) continue;\r\n\r\n    const node = {\r\n      id: building.id,\r\n      name: building.name,\r\n      input: Object.entries(building.input).map(([resource, amount]) => ({ resource, amount })),\r\n      output: Object.entries(building.output).map(([resource, amount]) => ({ resource, amount })),\r\n      requiredLevels,\r\n      parentId,\r\n      buildingCount: 0,\r\n      multiplier: multipliers[building.id] || 1,\r\n      specificBuildingLevel: null,\r\n    };\r\n\r\n    result.push(node);\r\n\r\n    // Calculate required levels for input buildings\r\n    Object.entries(building.input).forEach(([inputResource, inputAmount]) => {\r\n      const inputBuilding = Array.from(graph.values()).find(b => Object.keys(b.output).includes(inputResource));\r\n      if (inputBuilding) {\r\n        const inputRequiredAmount = requiredLevels * inputAmount;\r\n        const inputBuildingOutput = inputBuilding.output[inputResource];\r\n        const inputBuildingMultiplier = (multipliers[inputBuilding.id] || 1) + globalBuff;\r\n        const inputRequiredLevels = inputRequiredAmount / (inputBuildingOutput * inputBuildingMultiplier);\r\n        queue.push([inputBuilding.id, inputRequiredLevels, currentBuildingId]);\r\n      }\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n*/\r\n\r\nexport function calculateUniqueResourceFlow(graph, selectedBuilding, multipliers, globalBuff, buildingCount, buildingLevel) {\r\n  const result = [];\r\n  const queue = [[selectedBuilding, buildingCount * buildingLevel, null]];\r\n\r\n  while (queue.length > 0) {\r\n    const [currentBuildingId, requiredLevels, parentId] = queue.shift();\r\n    const building = graph.get(currentBuildingId);\r\n    if (!building) continue;\r\n\r\n    const node = {\r\n      id: building.id,\r\n      name: building.name,\r\n      input: Object.entries(building.input).map(([resource, amount]) => ({ resource, amount: amount * requiredLevels })),\r\n      output: Object.entries(building.output).map(([resource, amount]) => ({ resource, amount: amount * requiredLevels })),\r\n      requiredLevels,\r\n      parentId,\r\n      buildingCount: 1,\r\n      multiplier: multipliers[building.id] || 1,\r\n      specificBuildingLevel: null,\r\n    };\r\n\r\n    result.push(node);\r\n\r\n    Object.entries(building.input).forEach(([inputResource, inputAmount]) => {\r\n      const inputBuilding = Array.from(graph.values()).find(b => Object.keys(b.output).includes(inputResource));\r\n      if (inputBuilding) {\r\n        const inputRequiredAmount = requiredLevels * inputAmount;\r\n        const inputBuildingOutput = inputBuilding.output[inputResource];\r\n        const inputBuildingMultiplier = (multipliers[inputBuilding.id] || 1) + globalBuff;\r\n        const inputRequiredLevels = inputRequiredAmount / (inputBuildingOutput * inputBuildingMultiplier);\r\n        queue.push([inputBuilding.id, inputRequiredLevels, currentBuildingId]);\r\n      }\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function calculateCombinedResourceFlow(graph, selectedBuilding, multipliers, globalBuff, buildingCount, buildingLevel) {\r\n  const result = new Map();\r\n  const queue = [[selectedBuilding, buildingCount * buildingLevel, null]];\r\n\r\n  while (queue.length > 0) {\r\n    const [currentBuildingId, requiredLevels, parentId] = queue.shift();\r\n    const building = graph.get(currentBuildingId);\r\n    if (!building) continue;\r\n\r\n    let node = result.get(currentBuildingId);\r\n    if (!node) {\r\n      node = {\r\n        id: building.id,\r\n        name: building.name,\r\n        input: {},\r\n        output: {},\r\n        requiredLevels: 0,\r\n        parentIds: new Set(),\r\n        buildingCount: 0,\r\n        multiplier: multipliers[building.id] || 1,\r\n        specificBuildingLevel: null,\r\n      };\r\n      result.set(currentBuildingId, node);\r\n    }\r\n\r\n    node.requiredLevels += requiredLevels;\r\n    node.buildingCount += 1;\r\n    if (parentId) node.parentIds.add(parentId);\r\n\r\n    Object.entries(building.input).forEach(([resource, amount]) => {\r\n      node.input[resource] = (node.input[resource] || 0) + amount * requiredLevels;\r\n    });\r\n\r\n    Object.entries(building.output).forEach(([resource, amount]) => {\r\n      node.output[resource] = (node.output[resource] || 0) + amount * requiredLevels;\r\n    });\r\n\r\n    Object.entries(building.input).forEach(([inputResource, inputAmount]) => {\r\n      const inputBuilding = Array.from(graph.values()).find(b => Object.keys(b.output).includes(inputResource));\r\n      if (inputBuilding) {\r\n        const inputRequiredAmount = requiredLevels * inputAmount;\r\n        const inputBuildingOutput = inputBuilding.output[inputResource];\r\n        const inputBuildingMultiplier = (multipliers[inputBuilding.id] || 1) + globalBuff;\r\n        const inputRequiredLevels = inputRequiredAmount / (inputBuildingOutput * inputBuildingMultiplier);\r\n        queue.push([inputBuilding.id, inputRequiredLevels, currentBuildingId]);\r\n      }\r\n    });\r\n  }\r\n\r\n  return Array.from(result.values()).map(node => ({\r\n    ...node,\r\n    input: Object.entries(node.input).map(([resource, amount]) => ({ resource, amount })),\r\n    output: Object.entries(node.output).map(([resource, amount]) => ({ resource, amount })),\r\n    parentId: Array.from(node.parentIds)[0] || null,\r\n  }));\r\n}\r\n\r\n\r\nexport function processChainData(\r\n  flow,\r\n  graph,\r\n  state\r\n) {\r\n  return flow.map(node => {\r\n    const building = graph.get(node.id);\r\n    if (!building) return node;\r\n\r\n    const getBuildingLevel = (nodeId) => {\r\n      if (state.specificBuildingLevels[nodeId]) {\r\n        return state.specificBuildingLevels[nodeId];\r\n      } else if (state.buildingLevel) {\r\n        return parseInt(state.buildingLevel);\r\n      } else {\r\n        return 1;\r\n      }\r\n    };\r\n\r\n    const buildingLevel = getBuildingLevel(node.id);\r\n    const outputAmount = Object.values(building.output)[0]; // Assuming single output for simplicity\r\n    const totalMultiplier = (state.multipliers[node.id] || 1) + state.globalBuff;\r\n    const outputPerLevel = outputAmount * totalMultiplier;\r\n\r\n    const estimatedBuildings = Math.ceil(node.requiredLevels / buildingLevel);\r\n\r\n    return {\r\n      ...node,\r\n      buildingCount: estimatedBuildings,\r\n      specificBuildingLevel: state.specificBuildingLevels[node.id] || null,\r\n      outputPerLevel,\r\n      totalOutput: outputPerLevel * node.requiredLevels,\r\n      estimatedBuildings: estimatedBuildings\r\n    };\r\n  });\r\n}\r\n\r\nexport function calculateBuildings(\r\n  node: ChainNode,\r\n  state: ProductChainState\r\n): number {\r\n  const buildingLevel = getBuildingLevelForCalculation(node.id, state);\r\n  return Math.ceil(node.requiredAmount / buildingLevel);\r\n}\r\n\r\nexport function calculateAdjustedProduction(\r\n  baseProduction: number,\r\n  node: ChainNode,\r\n  state: ProductChainState\r\n): number {\r\n  const buildingLevels = Math.ceil(node.requiredAmount * getBuildingLevels(state));\r\n  const buildingMultiplier = state.multipliers[node.id] || 1;\r\n  return baseProduction * buildingLevels * (buildingMultiplier + state.globalBuff);\r\n}\r\n\r\nexport function getBuildingLevelForCalculation(\r\n  buildingId,\r\n  state = {}  // Provide a default empty object\r\n) {\r\n  if (state.specificBuildingLevels && state.specificBuildingLevels[buildingId]) return state.specificBuildingLevels[buildingId];\r\n  if (state.buildingLevel) return parseInt(state.buildingLevel);\r\n  return 1;\r\n}\r\n\r\nexport function getBuildingLevels(state: ProductChainState): number {\r\n  if (state.totalBuildingLevels) return state.totalBuildingLevels;\r\n  if (state.buildingCount && state.buildingLevel) return state.buildingCount * state.buildingLevel;\r\n  return 1;\r\n}\r\n\r\nexport function calculateSubtotal(chain: ChainNode[], state: ProductChainState): number {\r\n  return Math.ceil(chain.reduce((sum, node) => sum + node.requiredAmount * getBuildingLevels(state), 0));\r\n}\r\n\r\nexport function calculateDividedSubtotal(chain: ChainNode[], state: ProductChainState): number {\r\n  const subtotal = calculateSubtotal(chain, state);\r\n  const divisor = state.buildingLevel || 20;\r\n  return Math.ceil(subtotal / divisor);\r\n}\r\n\r\nexport function calculateEstimatedOutput(selectedNode: ChainNode | null, state: ProductChainState): number | null {\r\n  if (!selectedNode) return null;\r\n  const buildingMultiplier = state.multipliers[selectedNode.id] || 1;\r\n  return Math.ceil((buildingMultiplier + state.globalBuff) * selectedNode.requiredAmount);\r\n}","import React, { useEffect, useCallback, useMemo } from 'react';\r\nimport ReactFlow, {\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n  Background,\r\n  Controls,\r\n  Handle,\r\n  Position,\r\n  BezierEdge,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { IconButton, Box, Typography } from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport dagre from 'dagre';\r\n\r\nconst defaultEdgeOptions = {\r\n  type: BezierEdge,\r\n  style: { stroke: '#555' },\r\n  markerEnd: {\r\n    type: MarkerType.ArrowClosed,\r\n    color: '#888',\r\n  },\r\n};\r\n\r\nconst CustomNode = ({ data }) => (\r\n  <div style={{\r\n    background: '#eee',\r\n    border: '1px solid #ddd',\r\n    borderRadius: '50%',\r\n    padding: '10px',\r\n    width: '150px',\r\n    height: '150px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    fontSize: '11px',\r\n    textAlign: 'center',\r\n  }}>\r\n    <Handle type=\"target\" position={Position.Top} style={{ background: '#555' }} isConnectable={true} />\r\n    <div>\r\n      {data.inputs && data.inputs.length > 0 && (\r\n        <Typography variant=\"caption\" component=\"div\">\r\n          In: {data.inputs.map(input => `${input.resource}: ${Math.round(input.amount)}`).join(', ')}\r\n        </Typography>\r\n      )}\r\n    </div>\r\n    <Typography variant=\"subtitle2\" component=\"div\">{data.label}</Typography>\r\n    <div>\r\n      <Typography variant=\"caption\" component=\"div\">\r\n        Out: {data.outputs.map(output => `${output.resource}: ${Math.round(output.amount)}`).join(', ')}\r\n      </Typography>\r\n    </div>\r\n    <Handle type=\"source\" position={Position.Bottom} style={{ background: '#555' }} isConnectable={true} />\r\n  </div>\r\n);\r\n\r\nconst nodeTypes = {\r\n  custom: CustomNode,\r\n};\r\n\r\nconst ProductChainGraph = ({ \r\n  chain, \r\n  onClose, \r\n  calculateBuildings, \r\n  calculateAdjustedProduction, \r\n  globalBuff, \r\n  multipliers, \r\n  requiredAmounts,\r\n  selectedBuilding,\r\n  buildingCount,\r\n  buildingLevel,\r\n  totalBuildingLevels,\r\n  specificBuildingLevels\r\n}) => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n\r\n  const getLayoutedElements = (nodes, edges, direction = 'TB') => {\r\n    const dagreGraph = new dagre.graphlib.Graph();\r\n    dagreGraph.setDefaultEdgeLabel(() => ({}));\r\n\r\n    const nodeWidth = 150;\r\n    const nodeHeight = 150;\r\n\r\n    //const isHorizontal = direction === 'LR';\r\n    dagreGraph.setGraph({ rankdir: direction });\r\n\r\n    nodes.forEach((node) => {\r\n      dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });\r\n    });\r\n\r\n    edges.forEach((edge) => {\r\n      dagreGraph.setEdge(edge.source, edge.target);\r\n    });\r\n\r\n    dagre.layout(dagreGraph);\r\n\r\n    return {\r\n      nodes: nodes.map((node) => {\r\n        const nodeWithPosition = dagreGraph.node(node.id);\r\n        return {\r\n          ...node,\r\n          position: {\r\n            x: nodeWithPosition.x - nodeWidth / 2,\r\n            y: nodeWithPosition.y - nodeHeight / 2,\r\n          },\r\n        };\r\n      }),\r\n      edges,\r\n    };\r\n  };\r\n\r\n  const createNodes = useMemo(() => {\r\n  return chain.map((item) => {\r\n    const buildingMultiplier = item.multiplier || 1;\r\n    const totalMultiplier = buildingMultiplier + globalBuff;\r\n    let requiredAmount = item.requiredLevels || 0;  // Use requiredLevels instead of requiredAmount\r\n\r\n    const buildingCount = Math.ceil(item.estimatedBuildings || 0);\r\n\r\n    const formattedInputs = item.input.map(input => ({\r\n      resource: input.resource,\r\n      amount: (input.amount * buildingCount).toFixed(2)\r\n    }));\r\n    \r\n    const formattedOutputs = item.output.map(output => ({\r\n      resource: output.resource,\r\n      amount: (output.amount * buildingCount * totalMultiplier).toFixed(2)\r\n    }));\r\n\r\n    return {\r\n      id: item.id,\r\n      type: 'custom',\r\n      data: { \r\n        label: `${item.name} (x${buildingCount})`,\r\n        inputs: formattedInputs,\r\n        outputs: formattedOutputs,\r\n        requiredAmount: requiredAmount,\r\n      },\r\n      position: { x: 0, y: 0 },\r\n    };\r\n  });\r\n}, [chain, globalBuff]);\r\n\r\n\r\n\r\n  const createEdges = useMemo(() => {\r\n    return chain.flatMap(item => {\r\n      return item.input.flatMap(input => {\r\n        const sourceNode = chain.find(node => \r\n          node.output.some(output => output.resource === input.resource)\r\n        );\r\n\r\n        if (sourceNode) {\r\n          return [{\r\n            id: `e${sourceNode.id}-${item.id}-${input.resource}`,\r\n            source: sourceNode.id,\r\n            target: item.id,\r\n            sourcePosition: Position.Bottom,\r\n            targetPosition: Position.Top,\r\n            type: BezierEdge,\r\n            animated: false,\r\n            label: input.resource,\r\n            style: {\r\n              stroke: '#777',\r\n              strokeWidth: '1.5px',\r\n            },\r\n            markerEnd: {\r\n              type: MarkerType.ArrowClosed,\r\n              color: '#888',\r\n            },\r\n          }];\r\n        }\r\n        return [];\r\n      });\r\n    });\r\n  }, [chain]);\r\n\r\n  useEffect(() => {\r\n    const { nodes: layoutedNodes, edges: layoutedEdges } = getLayoutedElements(createNodes, createEdges);\r\n    setNodes(layoutedNodes);\r\n    setEdges(layoutedEdges);\r\n  }, [chain, globalBuff, setNodes, setEdges]);\r\n\r\n  const onConnect = useCallback((params) => setEdges((eds) => [...eds, params]), [setEdges]);\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <IconButton\r\n        onClick={onClose}\r\n        sx={{\r\n          position: 'absolute',\r\n          top: '10px',\r\n          right: '10px',\r\n          zIndex: 10,\r\n          bgcolor: 'background.paper',\r\n          '&:hover': {\r\n            bgcolor: 'action.hover',\r\n          },\r\n        }}\r\n        aria-label=\"close\"\r\n      >\r\n        <CloseIcon />\r\n      </IconButton>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        nodeTypes={nodeTypes}\r\n        defaultEdgeOptions={defaultEdgeOptions}\r\n        fitView\r\n      >\r\n        <Background />\r\n        <Controls />\r\n      </ReactFlow>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProductChainGraph;","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { RadioGroup, Radio, TextField, Select, MenuItem, Grid, Typography, Paper, Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Checkbox, FormControlLabel, Button } from '@mui/material';\r\nimport { buildGraph, calculateCombinedResourceFlow, calculateUniqueResourceFlow, processChainData, calculateBuildings, calculateAdjustedProduction, calculateSubtotal, calculateDividedSubtotal, calculateEstimatedOutput } from './productChainUtils';\r\nimport buildingsData from '../../data/buildingData.json';\r\nimport ProductChainGraph from './ProductChainGraph';\r\nimport { Modal } from '@mui/material';\r\n\r\n\r\nconst ProductChainCalc = () => {\r\n\tconst [state, setState] = useState({\r\n\t\tselectedBuilding: '',\r\n\t\tchain: [],\r\n\t\tmultipliers: {},\r\n\t\tglobalBuff: 0,\r\n\t\tbuildingCount: '',\r\n\t\tbuildingLevel: '',\r\n\t\tspecificBuildingLevels: {},\r\n\t\ttotalBuildingLevels: null,  // Add this if you're using it\r\n\t\t});\r\n\tconst [showAllItems, setShowAllItems] = useState(false);\r\n\tconst [showGraph, setShowGraph] = useState(false);\r\n\tconst [graph, setGraph] = useState(null);\r\n\tconst [calculationMode, setCalculationMode] = useState('unique');\r\n\tuseEffect(() => \r\n\t{\r\n\t\tsetGraph(buildGraph(buildingsData));\r\n\t}, []);\r\n\r\nuseEffect(() => {\r\n  if (state.selectedBuilding && graph) {\r\n    let flow;\r\n    if (calculationMode === 'unique') {\r\n      flow = calculateUniqueResourceFlow(\r\n        graph, \r\n        state.selectedBuilding, \r\n        state.multipliers, \r\n        state.globalBuff,\r\n        parseInt(state.buildingCount) || 1,\r\n        parseInt(state.buildingLevel) || 1\r\n      );\r\n    } else {\r\n      flow = calculateCombinedResourceFlow(\r\n        graph, \r\n        state.selectedBuilding, \r\n        state.multipliers, \r\n        state.globalBuff,\r\n        parseInt(state.buildingCount) || 1,\r\n        parseInt(state.buildingLevel) || 1\r\n      );\r\n    }\r\n    const chainData = processChainData(flow, graph, state);\r\n    setState(prevState => ({ ...prevState, chain: chainData }));\r\n  }\r\n}, [state.selectedBuilding, state.multipliers, graph, state.globalBuff, state.buildingCount, state.buildingLevel, state.specificBuildingLevels, calculationMode]);\r\n\r\n  const handleMultiplierChange = (buildingId, value) => {\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      multipliers: {\r\n        ...prevState.multipliers,\r\n        [buildingId]: parseFloat(value) || 1\r\n      }\r\n    }));\r\n  };\r\n\r\n  const sortedBuildings = useMemo(() => {\r\n    return [...buildingsData]\r\n      .filter(building => showAllItems || building.ev)\r\n      .sort((a, b) => a.name.localeCompare(b.name));\r\n  }, [showAllItems]);\r\n\r\n  const handleSpecificBuildingLevelChange = (buildingId, value) => {\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      specificBuildingLevels: {\r\n        ...prevState.specificBuildingLevels,\r\n        [buildingId]: value === '' ? null : parseInt(value)\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setState(prevState => ({ ...prevState, [field]: value }));\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      <Typography variant=\"h4\" gutterBottom>Product Chain Calculator</Typography>\r\n      <Box sx={{ mb: 3 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item xs={12} sm={6}>\r\n            <Select\r\n              value={state.selectedBuilding}\r\n              onChange={(e) => handleInputChange('selectedBuilding', e.target.value)}\r\n              fullWidth\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>Select a building</em>\r\n              </MenuItem>\r\n              {sortedBuildings.map(building => (\r\n                <MenuItem key={building.id} value={building.id}>{building.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={showAllItems}\r\n                  onChange={(e) => setShowAllItems(e.target.checked)}\r\n                />\r\n              }\r\n              label=\"Show All Items\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              label=\"Main Building Count\"\r\n              type=\"number\"\r\n              value={state.buildingCount}\r\n              onChange={(e) => handleInputChange('buildingCount', e.target.value)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              label=\"Main Building Level\"\r\n              type=\"number\"\r\n              value={state.buildingLevel}\r\n              onChange={(e) => handleInputChange('buildingLevel', e.target.value)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              label=\"Global Buff\"\r\n              type=\"number\"\r\n              value={state.globalBuff}\r\n              onChange={(e) => handleInputChange('globalBuff', parseInt(e.target.value) || 0)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n\t\t  <RadioGroup\r\n\t\t\trow\r\n\t\t\tvalue={calculationMode}\r\n\t\t\tonChange={(e) => setCalculationMode(e.target.value)}\r\n\t\t  >\r\n\t\t\t<FormControlLabel value=\"unique\" control={<Radio />} label=\"Unique Nodes\" />\r\n\t\t\t<FormControlLabel value=\"combined\" control={<Radio />} label=\"Combined Nodes\" />\r\n\t\t  </RadioGroup>\r\n        </Grid>\r\n      </Box>\r\n      \r\n      {state.chain.length > 0 && (\r\n        <>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={() => setShowGraph(true)}\r\n            sx={{ mt: 2, mb: 2 }}\r\n          >\r\n            Show Visual Graph\r\n          </Button>\r\n          <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Building</TableCell>\r\n                  <TableCell>Input</TableCell>\r\n                  <TableCell>Output</TableCell>\r\n                  <TableCell>Building Specific Multiplier</TableCell>\r\n                  <TableCell>Specific Building Level</TableCell>\r\n                  <TableCell>Total Building Levels</TableCell>\r\n                  <TableCell>Estimated Buildings</TableCell>\r\n                \r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {state.chain.map((row) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell>{row.name}</TableCell>\r\n                    <TableCell style={{ whiteSpace: 'pre-line' }}>{row.input.map(i => `${i.resource}: ${i.amount}`).join('\\n')}</TableCell>\r\n                    <TableCell style={{ whiteSpace: 'pre-line' }}>{row.output.map(o => `${o.resource}: ${o.amount}`).join('\\n')}</TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        type=\"number\"\r\n                        value={state.multipliers[row.id] || 1}\r\n                        onChange={(e) => handleMultiplierChange(row.id, e.target.value)}\r\n                        inputProps={{ min: \"1\", step: \"0.1\", style: { width: '80px' } }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        type=\"number\"\r\n                        value={state.specificBuildingLevels[row.id] || ''}\r\n                        onChange={(e) => handleSpecificBuildingLevelChange(row.id, e.target.value)}\r\n                        inputProps={{ min: \"1\", step: \"1\", style: { width: '80px' } }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>{row.requiredLevels.toFixed(0)}</TableCell>\r\n                    <TableCell>{row.estimatedBuildings}</TableCell>            \r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <Typography variant=\"subtitle1\">\r\n              {state.selectedBuilding && `${buildingsData.find(b => b.id === state.selectedBuilding)?.name} Estimated Output: ${calculateEstimatedOutput(state.chain.find(node => node.id === state.selectedBuilding), state)}`}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 2 }}>\r\n              <Typography variant=\"subtitle1\">\r\n                Total Building Levels (Est): {calculateSubtotal(state.chain, state)}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\">\r\n                Total Buildings (Est): {calculateDividedSubtotal(state.chain, state)}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </>\r\n      )}\r\n\r\n     <Modal\r\n  open={showGraph}\r\n  onClose={() => setShowGraph(false)}\r\n  aria-labelledby=\"product-chain-graph-modal\"\r\n  aria-describedby=\"product-chain-graph-description\"\r\n>\r\n  <Box sx={{\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '90%',\r\n    height: '90%',\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n  }}>\r\n<ProductChainGraph \r\n  chain={state.chain}\r\n  onClose={() => setShowGraph(false)}\r\n  globalBuff={state.globalBuff}\r\n  multipliers={state.multipliers}\r\n  selectedBuilding={state.selectedBuilding}\r\n  buildingCount={parseInt(state.buildingCount) || 1}\r\n  buildingLevel={parseInt(state.buildingLevel) || 1}\r\n  specificBuildingLevels={state.specificBuildingLevels}\r\n/>\r\n  </Box>\r\n</Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ProductChainCalc;"],"names":["getBuildingLevels","state","totalBuildingLevels","buildingCount","buildingLevel","calculateSubtotal","chain","Math","ceil","reduce","sum","node","requiredAmount","calculateDividedSubtotal","subtotal","divisor","calculateEstimatedOutput","selectedNode","buildingMultiplier","multipliers","id","globalBuff","defaultEdgeOptions","type","BezierEdge","style","stroke","markerEnd","MarkerType","ArrowClosed","color","nodeTypes","custom","_ref","data","_jsxs","background","border","borderRadius","padding","width","height","display","flexDirection","justifyContent","alignItems","fontSize","textAlign","children","_jsx","Handle","position","Position","Top","isConnectable","inputs","length","Typography","variant","component","map","input","concat","resource","round","amount","join","label","outputs","output","Bottom","_ref2","onClose","calculateBuildings","calculateAdjustedProduction","requiredAmounts","selectedBuilding","specificBuildingLevels","nodes","setNodes","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","createNodes","useMemo","item","totalMultiplier","multiplier","requiredLevels","estimatedBuildings","formattedInputs","toFixed","formattedOutputs","name","x","y","createEdges","flatMap","sourceNode","find","some","source","target","sourcePosition","targetPosition","animated","strokeWidth","useEffect","layoutedNodes","layoutedEdges","direction","arguments","undefined","dagreGraph","dagre","Graph","setDefaultEdgeLabel","setGraph","rankdir","forEach","setNode","edge","setEdge","nodeWithPosition","nodeWidth","nodeHeight","getLayoutedElements","onConnect","useCallback","params","eds","Box","sx","IconButton","onClick","top","right","zIndex","bgcolor","CloseIcon","ReactFlow","fitView","Background","Controls","ProductChainCalc","_buildingsData$find","setState","useState","showAllItems","setShowAllItems","showGraph","setShowGraph","graph","calculationMode","setCalculationMode","Map","buildingsData","building","flow","result","queue","currentBuildingId","parentId","shift","get","Object","entries","specificBuildingLevel","push","_ref3","inputResource","inputAmount","inputBuilding","Array","from","values","b","keys","includes","inputRequiredLevels","calculateUniqueResourceFlow","parseInt","parentIds","Set","set","add","_ref4","_ref5","_ref6","_ref7","_ref8","calculateCombinedResourceFlow","chainData","nodeId","outputPerLevel","totalOutput","processChainData","prevState","sortedBuildings","filter","ev","sort","a","localeCompare","handleInputChange","field","value","Paper","elevation","p","maxWidth","mx","gutterBottom","mb","Grid","container","spacing","xs","sm","Select","onChange","e","fullWidth","MenuItem","FormControlLabel","control","Checkbox","checked","TextField","inputProps","min","step","RadioGroup","row","Radio","_Fragment","Button","mt","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","whiteSpace","i","o","handleMultiplierChange","buildingId","parseFloat","handleSpecificBuildingLevelChange","gap","Modal","open","left","transform","boxShadow","ProductChainGraph"],"sourceRoot":""}