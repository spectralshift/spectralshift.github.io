{"version":3,"file":"static/js/531.f2e1edc8.chunk.js","mappings":"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","sources":["components/PageHeader.js","pages/cividle/productChainUtils.js","pages/cividle/ProductChainGraph.js","pages/cividle/ProductChainCalc.js"],"sourcesContent":["// src/components/PageHeader.js\r\nimport React from 'react';\r\nimport { Typography, Box } from '@mui/material';\r\n\r\nconst PageHeader = ({ title, description }) => {\r\n  return (\r\n    <Box sx={{ mb: 4 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      {description && (\r\n        <Typography \r\n          variant=\"subtitle1\" \r\n          sx={{ \r\n            mb: 3, \r\n            fontStyle: 'italic',\r\n            color: 'text.secondary',\r\n            borderLeft: '4px solid',\r\n            borderColor: 'primary.main',\r\n            pl: 2\r\n          }}\r\n        >\r\n          {description}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PageHeader;","import { BuildingData, ChainNode, ProductChainState } from './productChainTypes';\r\n\r\nexport function buildGraph(buildingsData: BuildingData[]): Map<string, BuildingData> {\r\n  return new Map(buildingsData.map(building => [building.id, building]));\r\n}\r\n\r\nexport function calculateUniqueResourceFlow(graph, selectedBuilding, multipliers, globalBuff, buildingCount, buildingLevel) {\r\n  const result = [];\r\n  const queue = [[selectedBuilding, buildingCount * buildingLevel, null]];\r\n  const visited = new Set();\r\n\r\n  while (queue.length > 0) {\r\n    const [currentBuildingId, requiredLevels, parentId] = queue.shift();\r\n    if (visited.has(currentBuildingId)) continue;\r\n    visited.add(currentBuildingId);\r\n\r\n    const building = graph.get(currentBuildingId);\r\n    if (!building) continue;\r\n\r\n    const node = {\r\n      id: building.id,\r\n      name: building.name,\r\n      input: Object.entries(building.input).map(([resource, amount]) => ({ resource, amount: amount * requiredLevels })),\r\n      output: Object.entries(building.output).map(([resource, amount]) => ({ resource, amount: amount * requiredLevels })),\r\n      requiredLevels,\r\n      parentId,\r\n      buildingCount: 1,\r\n      multiplier: multipliers[building.id] || 1,\r\n      specificBuildingLevel: null,\r\n    };\r\n\r\n    result.push(node);\r\n\r\n    Object.entries(building.input).forEach(([inputResource, inputAmount]) => {\r\n      const inputBuilding = Array.from(graph.values()).find(b => Object.keys(b.output).includes(inputResource));\r\n      if (inputBuilding) {\r\n        const inputRequiredAmount = requiredLevels * inputAmount;\r\n        const inputBuildingOutput = inputBuilding.output[inputResource];\r\n        const inputBuildingMultiplier = (multipliers[inputBuilding.id] || 1) + globalBuff;\r\n        const inputRequiredLevels = inputRequiredAmount / (inputBuildingOutput * inputBuildingMultiplier);\r\n        queue.push([inputBuilding.id, inputRequiredLevels, currentBuildingId]);\r\n      }\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function calculateCombinedResourceFlow(graph, selectedBuilding, multipliers, globalBuff, buildingCount, buildingLevel) {\r\n  const result = new Map();\r\n  const queue = [[selectedBuilding, buildingCount * buildingLevel, null]];\r\n\r\n  while (queue.length > 0) {\r\n    const [currentBuildingId, requiredLevels, parentId] = queue.shift();\r\n    const building = graph.get(currentBuildingId);\r\n    if (!building) continue;\r\n\r\n    let node = result.get(currentBuildingId);\r\n    if (!node) {\r\n      node = {\r\n        id: building.id,\r\n        name: building.name,\r\n        input: {},\r\n        output: {},\r\n        requiredLevels: 0,\r\n        parentIds: new Set(),\r\n        buildingCount: 0,\r\n        multiplier: multipliers[building.id] || 1,\r\n        specificBuildingLevel: null,\r\n      };\r\n      result.set(currentBuildingId, node);\r\n    }\r\n\r\n    node.requiredLevels += requiredLevels;\r\n    node.buildingCount += 1;\r\n    if (parentId) node.parentIds.add(parentId);\r\n\r\n    Object.entries(building.input).forEach(([resource, amount]) => {\r\n      node.input[resource] = (node.input[resource] || 0) + amount * requiredLevels;\r\n    });\r\n\r\n    Object.entries(building.output).forEach(([resource, amount]) => {\r\n      node.output[resource] = (node.output[resource] || 0) + amount * requiredLevels;\r\n    });\r\n\r\n    Object.entries(building.input).forEach(([inputResource, inputAmount]) => {\r\n      const inputBuilding = Array.from(graph.values()).find(b => Object.keys(b.output).includes(inputResource));\r\n      if (inputBuilding) {\r\n        const inputRequiredAmount = requiredLevels * inputAmount;\r\n        const inputBuildingOutput = inputBuilding.output[inputResource];\r\n        const inputBuildingMultiplier = (multipliers[inputBuilding.id] || 1) + globalBuff;\r\n        const inputRequiredLevels = inputRequiredAmount / (inputBuildingOutput * inputBuildingMultiplier);\r\n        queue.push([inputBuilding.id, inputRequiredLevels, currentBuildingId]);\r\n      }\r\n    });\r\n  }\r\n\r\n  return Array.from(result.values()).map(node => ({\r\n    ...node,\r\n    input: Object.entries(node.input).map(([resource, amount]) => ({ resource, amount })),\r\n    output: Object.entries(node.output).map(([resource, amount]) => ({ resource, amount })),\r\n    parentId: Array.from(node.parentIds)[0] || null,\r\n  }));\r\n}\r\n\r\n\r\nexport function processChainData(\r\n  flow,\r\n  graph,\r\n  state\r\n) {\r\n  return flow.map(node => {\r\n    const building = graph.get(node.id);\r\n    if (!building) return node;\r\n\r\n    const getBuildingLevel = (nodeId) => {\r\n      if (state.specificBuildingLevels[nodeId]) {\r\n        return state.specificBuildingLevels[nodeId];\r\n      } else if (state.buildingLevel) {\r\n        return parseInt(state.buildingLevel);\r\n      } else {\r\n        return 1;\r\n      }\r\n    };\r\n\r\n    const buildingLevel = getBuildingLevel(node.id);\r\n    const outputAmount = Object.values(building.output)[0]; // Assuming single output for simplicity\r\n    const totalMultiplier = (state.multipliers[node.id] || 1) + state.globalBuff;\r\n    const outputPerLevel = outputAmount * totalMultiplier;\r\n\r\n    const estimatedBuildings = Math.ceil(node.requiredLevels / buildingLevel);\r\n\r\n    return {\r\n      ...node,\r\n      buildingCount: estimatedBuildings,\r\n      specificBuildingLevel: state.specificBuildingLevels[node.id] || null,\r\n      outputPerLevel,\r\n      totalOutput: outputPerLevel * node.requiredLevels,\r\n      estimatedBuildings: estimatedBuildings\r\n    };\r\n  });\r\n}\r\n\r\nexport function calculateBuildings(\r\n  node: ChainNode,\r\n  state: ProductChainState\r\n): number {\r\n  const buildingLevel = getBuildingLevelForCalculation(node.id, state);\r\n  return Math.ceil(node.requiredAmount / buildingLevel);\r\n}\r\n\r\nexport function calculateAdjustedProduction(\r\n  baseProduction: number,\r\n  node: ChainNode,\r\n  state: ProductChainState\r\n): number {\r\n  const buildingLevels = Math.ceil(node.requiredAmount * getBuildingLevels(state));\r\n  const buildingMultiplier = state.multipliers[node.id] || 1;\r\n  return baseProduction * buildingLevels * (buildingMultiplier + state.globalBuff);\r\n}\r\n\r\nexport function getBuildingLevelForCalculation(\r\n  buildingId,\r\n  state = {}  // Provide a default empty object\r\n) {\r\n  if (state.specificBuildingLevels && state.specificBuildingLevels[buildingId]) return state.specificBuildingLevels[buildingId];\r\n  if (state.buildingLevel) return parseInt(state.buildingLevel);\r\n  return 1;\r\n}\r\n\r\nexport function getBuildingLevels(state: ProductChainState): number {\r\n  if (state.totalBuildingLevels) return state.totalBuildingLevels;\r\n  if (state.buildingCount && state.buildingLevel) return state.buildingCount * state.buildingLevel;\r\n  return 1;\r\n}\r\n\r\nexport function calculateSubtotal(chain: ChainNode[], state: ProductChainState): number {\r\n  return Math.ceil(chain.reduce((sum, node) => sum + node.requiredAmount * getBuildingLevels(state), 0));\r\n}\r\n\r\nexport function calculateDividedSubtotal(chain: ChainNode[], state: ProductChainState): number {\r\n  const subtotal = calculateSubtotal(chain, state);\r\n  const divisor = state.buildingLevel || 20;\r\n  return Math.ceil(subtotal / divisor);\r\n}\r\n\r\nexport function calculateEstimatedOutput(selectedNode: ChainNode | null, state: ProductChainState): number | null {\r\n  if (!selectedNode) return null;\r\n  const buildingMultiplier = state.multipliers[selectedNode.id] || 1;\r\n  return Math.ceil((buildingMultiplier + state.globalBuff) * selectedNode.requiredAmount);\r\n}","import React, { useEffect, useCallback, useMemo } from 'react';\r\nimport ReactFlow, {\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n  Background,\r\n  Controls,\r\n  Handle,\r\n  Position,\r\n  BezierEdge,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { IconButton, Box, Typography } from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport dagre from 'dagre';\r\n\r\nconst defaultEdgeOptions = {\r\n  type: BezierEdge,\r\n  style: { stroke: '#555' },\r\n  markerEnd: {\r\n    type: MarkerType.ArrowClosed,\r\n    color: '#888',\r\n  },\r\n};\r\n\r\nconst CustomNode = ({ data }) => (\r\n  <div style={{\r\n    background: '#eee',\r\n    border: '1px solid #ddd',\r\n    borderRadius: '50%',\r\n    color: '#202020',\r\n    padding: '10px',\r\n    width: '150px',\r\n    height: '150px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    fontSize: '11px',\r\n    textAlign: 'center',\r\n  }}>\r\n    <Handle type=\"target\" position={Position.Top} style={{ background: '#555' }} isConnectable={true} />\r\n    <div>\r\n      {data.inputs && data.inputs.length > 0 && (\r\n        <Typography variant=\"caption\" component=\"div\">\r\n          {data.inputs.map(input => `${input.resource}: ${input.amount}`).join(', ')}\r\n        </Typography>\r\n      )}\r\n    </div>\r\n    <Typography variant=\"subtitle2\" component=\"div\">{data.label}</Typography>\r\n    <div>\r\n      <Typography variant=\"caption\" component=\"div\">\r\n        {data.outputs.map(output => `${output.resource}: ${output.amount}`).join(', ')}\r\n      </Typography>\r\n    </div>\r\n    <Handle type=\"source\" position={Position.Bottom} style={{ background: '#555' }} isConnectable={true} />\r\n  </div>\r\n);\r\n\r\nconst nodeTypes = {\r\n  custom: CustomNode,\r\n};\r\n\r\nconst ProductChainGraph = ({ \r\n  chain, \r\n  onClose, \r\n  calculateBuildings, \r\n  calculateAdjustedProduction, \r\n  globalBuff, \r\n  multipliers, \r\n  requiredAmounts,\r\n  selectedBuilding,\r\n  buildingCount,\r\n  buildingLevel,\r\n  totalBuildingLevels,\r\n  specificBuildingLevels,\r\n  calculationMode\r\n}) => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n\r\n  const getLayoutedElements = (nodes, edges, direction = 'TB') => {\r\n    const dagreGraph = new dagre.graphlib.Graph();\r\n    dagreGraph.setDefaultEdgeLabel(() => ({}));\r\n\r\n    const nodeWidth = 150;\r\n    const nodeHeight = 150;\r\n\r\n    //const isHorizontal = direction === 'LR';\r\n    dagreGraph.setGraph({ rankdir: direction });\r\n\r\n    nodes.forEach((node) => {\r\n      dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });\r\n    });\r\n\r\n    edges.forEach((edge) => {\r\n      dagreGraph.setEdge(edge.source, edge.target);\r\n    });\r\n\r\n    dagre.layout(dagreGraph);\r\n\r\n    return {\r\n      nodes: nodes.map((node) => {\r\n        const nodeWithPosition = dagreGraph.node(node.id);\r\n        return {\r\n          ...node,\r\n          position: {\r\n            x: nodeWithPosition.x - nodeWidth / 2,\r\n            y: nodeWithPosition.y - nodeHeight / 2,\r\n          },\r\n        };\r\n      }),\r\n      edges,\r\n    };\r\n  };\r\n\r\nconst createNodes = useMemo(() => {\r\n  return chain.map((item, index) => ({\r\n    id: `${item.id}-${index}`, // Use a unique id for each node\r\n    type: 'custom',\r\n    data: { \r\n      label: `${item.name} (x${item.estimatedBuildings || 1})`,\r\n      inputs: item.input,\r\n      outputs: item.output,\r\n      requiredAmount: item.requiredLevels || 0,\r\n      originalId: item.id, // Store the original id for edge creation\r\n    },\r\n    position: { x: 0, y: 0 },\r\n  }));\r\n}, [chain]);\r\n\r\n\r\n\r\nconst createEdges = useMemo(() => {\r\n  return chain.flatMap((item, itemIndex) => {\r\n   /* if (calculationMode === 'unique') {\r\n      // For unique mode, only connect to the immediate parent\r\n      if (item.parentId) {\r\n        const parentIndex = chain.findIndex(node => node.id === item.parentId);\r\n        if (parentIndex !== -1) {\r\n          return [{\r\n            id: `e${item.parentId}-${parentIndex}-${item.id}-${itemIndex}`,\r\n            source: `${item.parentId}-${parentIndex}`,\r\n            target: `${item.id}-${itemIndex}`,\r\n            sourcePosition: Position.Bottom,\r\n            targetPosition: Position.Top,\r\n            type: BezierEdge,\r\n            animated: false,\r\n            label: item.input[0]?.resource, // Assuming there's at least one input\r\n            style: {\r\n              stroke: '#777',\r\n              strokeWidth: '1.5px',\r\n            },\r\n            markerEnd: {\r\n              type: MarkerType.ArrowClosed,\r\n              color: '#888',\r\n            },\r\n          }];\r\n        }\r\n      }\r\n      return [];\r\n    } else {*/\r\n      // For combined mode, use the existing logic\r\n      return item.input.flatMap(input => {\r\n        const sourceNodes = chain.map((node, nodeIndex) => ({...node, index: nodeIndex})).filter(node => \r\n          node.output.some(output => output.resource === input.resource)\r\n        );\r\n\r\n        return sourceNodes.map(sourceNode => ({\r\n          id: `e${sourceNode.id}-${sourceNode.index}-${item.id}-${itemIndex}-${input.resource}`,\r\n          source: `${sourceNode.id}-${sourceNode.index}`,\r\n          target: `${item.id}-${itemIndex}`,\r\n          sourcePosition: Position.Bottom,\r\n          targetPosition: Position.Top,\r\n          type: BezierEdge,\r\n          animated: false,\r\n          label: input.resource,\r\n          style: {\r\n            stroke: '#777',\r\n            strokeWidth: '1.5px',\r\n          },\r\n          markerEnd: {\r\n            type: MarkerType.ArrowClosed,\r\n            color: '#888',\r\n          },\r\n        }));\r\n      });\r\n   // }\r\n  });\r\n}, [chain, calculationMode]);\r\n\r\nuseEffect(() => {\r\n  const { nodes: layoutedNodes, edges: layoutedEdges } = getLayoutedElements(createNodes, createEdges);\r\n  setNodes(layoutedNodes);\r\n  setEdges(layoutedEdges);\r\n}, [chain, globalBuff, calculationMode, setNodes, setEdges]);\r\n\r\n  const onConnect = useCallback((params) => setEdges((eds) => [...eds, params]), [setEdges]);\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <IconButton\r\n        onClick={onClose}\r\n        sx={{\r\n          position: 'absolute',\r\n          top: '10px',\r\n          right: '10px',\r\n          zIndex: 10,\r\n          bgcolor: 'background.paper',\r\n          '&:hover': {\r\n            bgcolor: 'action.hover',\r\n          },\r\n        }}\r\n        aria-label=\"close\"\r\n      >\r\n        <CloseIcon />\r\n      </IconButton>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        nodeTypes={nodeTypes}\r\n        defaultEdgeOptions={defaultEdgeOptions}\r\n        fitView\r\n      >\r\n        <Background />\r\n        <Controls />\r\n      </ReactFlow>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProductChainGraph;","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { RadioGroup, Radio, TextField, Select, MenuItem, Grid, Typography, Paper, Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Checkbox, FormControlLabel, Button } from '@mui/material';\r\nimport { buildGraph, calculateCombinedResourceFlow, calculateUniqueResourceFlow, processChainData, calculateBuildings, calculateAdjustedProduction, calculateSubtotal, calculateDividedSubtotal, calculateEstimatedOutput } from './productChainUtils';\r\nimport buildingsData from '../../data/buildingData.json';\r\nimport ProductChainGraph from './ProductChainGraph';\r\nimport { Modal } from '@mui/material';\r\nimport PageHeader from '../../components/PageHeader';\r\n\r\nconst PAGE_TITLE = \"Production Chain Calculator and Display\";\r\nconst PAGE_DESCRIPTION = \"This page allows you to see the breakdown of the production chain required to generate a good. Select the building you want to build and its dependencies will be calculated. Click on the 'Show Visual Graph' to see a visualization of the chain.\"\r\n\r\n\r\n\r\nconst ProductChainCalc = () => {\r\n\tconst [state, setState] = useState({\r\n\t\tselectedBuilding: '',\r\n\t\tchain: [],\r\n\t\tmultipliers: {},\r\n\t\tglobalBuff: 0,\r\n\t\tbuildingCount: '',\r\n\t\tbuildingLevel: '',\r\n\t\tspecificBuildingLevels: {},\r\n\t\ttotalBuildingLevels: null,  // Add this if you're using it\r\n\t\t});\r\n\tconst [showAllItems, setShowAllItems] = useState(false);\r\n\tconst [showGraph, setShowGraph] = useState(false);\r\n\tconst [graph, setGraph] = useState(null);\r\n\tconst [calculationMode, setCalculationMode] = useState('unique');\r\n\tuseEffect(() => \r\n\t{\r\n\t\tsetGraph(buildGraph(buildingsData));\r\n\t}, []);\r\n\r\nuseEffect(() => {\r\n  if (state.selectedBuilding && graph) {\r\n    let flow;\r\n    if (calculationMode === 'unique') {\r\n      flow = calculateUniqueResourceFlow(\r\n        graph, \r\n        state.selectedBuilding, \r\n        state.multipliers, \r\n        state.globalBuff,\r\n        parseInt(state.buildingCount) || 1,\r\n        parseInt(state.buildingLevel) || 1\r\n      );\r\n    } else {\r\n      flow = calculateCombinedResourceFlow(\r\n        graph, \r\n        state.selectedBuilding, \r\n        state.multipliers, \r\n        state.globalBuff,\r\n        parseInt(state.buildingCount) || 1,\r\n        parseInt(state.buildingLevel) || 1\r\n      );\r\n    }\r\n    const chainData = processChainData(flow, graph, state);\r\n    setState(prevState => ({ ...prevState, chain: chainData }));\r\n  }\r\n}, [state.selectedBuilding, state.multipliers, graph, state.globalBuff, state.buildingCount, state.buildingLevel, state.specificBuildingLevels, calculationMode]);\r\n\r\n  const handleMultiplierChange = (buildingId, value) => {\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      multipliers: {\r\n        ...prevState.multipliers,\r\n        [buildingId]: parseFloat(value) || 1\r\n      }\r\n    }));\r\n  };\r\n\r\n  const sortedBuildings = useMemo(() => {\r\n    return [...buildingsData]\r\n      .filter(building => showAllItems || building.ev)\r\n      .sort((a, b) => a.name.localeCompare(b.name));\r\n  }, [showAllItems]);\r\n\r\n  const handleSpecificBuildingLevelChange = (buildingId, value) => {\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      specificBuildingLevels: {\r\n        ...prevState.specificBuildingLevels,\r\n        [buildingId]: value === '' ? null : parseInt(value)\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setState(prevState => ({ ...prevState, [field]: value }));\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      <PageHeader title={PAGE_TITLE} description={PAGE_DESCRIPTION} />  \r\n      <Box sx={{ mb: 3 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item xs={12} sm={6}>\r\n            <Select\r\n              value={state.selectedBuilding}\r\n              onChange={(e) => handleInputChange('selectedBuilding', e.target.value)}\r\n              fullWidth\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>Select a building</em>\r\n              </MenuItem>\r\n              {sortedBuildings.map(building => (\r\n                <MenuItem key={building.id} value={building.id}>{building.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={showAllItems}\r\n                  onChange={(e) => setShowAllItems(e.target.checked)}\r\n                />\r\n              }\r\n              label=\"Show All Items\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              label=\"Main Building Count\"\r\n              type=\"number\"\r\n              value={state.buildingCount}\r\n              onChange={(e) => handleInputChange('buildingCount', e.target.value)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              label=\"Main Building Level\"\r\n              type=\"number\"\r\n              value={state.buildingLevel}\r\n              onChange={(e) => handleInputChange('buildingLevel', e.target.value)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              label=\"Global Buff\"\r\n              type=\"number\"\r\n              value={state.globalBuff}\r\n              onChange={(e) => handleInputChange('globalBuff', parseInt(e.target.value) || 0)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n\t\t  <RadioGroup\r\n\t\t\trow\r\n\t\t\tvalue={calculationMode}\r\n\t\t\tonChange={(e) => setCalculationMode(e.target.value)}\r\n\t\t  >\r\n\t\t\t<FormControlLabel value=\"unique\" control={<Radio />} label=\"Unique Nodes\" />\r\n\t\t\t<FormControlLabel value=\"combined\" control={<Radio />} label=\"Combined Nodes\" />\r\n\t\t  </RadioGroup>\r\n        </Grid>\r\n      </Box>\r\n      \r\n      {state.chain.length > 0 && (\r\n        <>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={() => setShowGraph(true)}\r\n            sx={{ mt: 2, mb: 2 }}\r\n          >\r\n            Show Visual Graph\r\n          </Button>\r\n          <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Building</TableCell>\r\n                  <TableCell>Input</TableCell>\r\n                  <TableCell>Output</TableCell>\r\n                  <TableCell>Building Specific Multiplier</TableCell>\r\n                  <TableCell>Specific Building Level</TableCell>\r\n                  <TableCell>Total Building Levels</TableCell>\r\n                  <TableCell>Estimated Buildings</TableCell>\r\n                \r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {state.chain.map((row) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell>{row.name}</TableCell>\r\n                    <TableCell style={{ whiteSpace: 'pre-line' }}>{row.input.map(i => `${i.resource}: ${i.amount.toFixed(0)}`).join('\\n')}</TableCell>\r\n                    <TableCell style={{ whiteSpace: 'pre-line' }}>{row.output.map(o => `${o.resource}: ${o.amount.toFixed(0)}`).join('\\n')}</TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        type=\"number\"\r\n                        value={state.multipliers[row.id] || 1}\r\n                        onChange={(e) => handleMultiplierChange(row.id, e.target.value)}\r\n                        inputProps={{ min: \"1\", step: \"0.1\", style: { width: '80px' } }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        type=\"number\"\r\n                        value={state.specificBuildingLevels[row.id] || ''}\r\n                        onChange={(e) => handleSpecificBuildingLevelChange(row.id, e.target.value)}\r\n                        inputProps={{ min: \"1\", step: \"1\", style: { width: '80px' } }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>{row.requiredLevels.toFixed(0)}</TableCell>\r\n                    <TableCell>{row.estimatedBuildings}</TableCell>            \r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <Typography variant=\"subtitle1\">\r\n              {state.selectedBuilding && `${buildingsData.find(b => b.id === state.selectedBuilding)?.name} Estimated Output: ${calculateEstimatedOutput(state.chain.find(node => node.id === state.selectedBuilding), state)}`}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 2 }}>\r\n              <Typography variant=\"subtitle1\">\r\n                Total Building Levels (Est): {calculateSubtotal(state.chain, state)}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\">\r\n                Total Buildings (Est): {calculateDividedSubtotal(state.chain, state)}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </>\r\n      )}\r\n\r\n     <Modal\r\n  open={showGraph}\r\n  onClose={() => setShowGraph(false)}\r\n  aria-labelledby=\"product-chain-graph-modal\"\r\n  aria-describedby=\"product-chain-graph-description\"\r\n>\r\n  <Box sx={{\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '90%',\r\n    height: '90%',\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n  }}>\r\n<ProductChainGraph \r\n  chain={state.chain}\r\n  onClose={() => setShowGraph(false)}\r\n  globalBuff={state.globalBuff}\r\n  multipliers={state.multipliers}\r\n  selectedBuilding={state.selectedBuilding}\r\n  buildingCount={parseInt(state.buildingCount) || 1}\r\n  buildingLevel={parseInt(state.buildingLevel) || 1}\r\n  specificBuildingLevels={state.specificBuildingLevels}\r\n  calculationMode={calculationMode}\r\n/>\r\n  </Box>\r\n</Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ProductChainCalc;"],"names":["_ref","title","description","_jsxs","Box","sx","mb","children","_jsx","Typography","variant","gutterBottom","fontStyle","color","borderLeft","borderColor","pl","getBuildingLevels","state","totalBuildingLevels","buildingCount","buildingLevel","calculateSubtotal","chain","Math","ceil","reduce","sum","node","requiredAmount","calculateDividedSubtotal","subtotal","divisor","calculateEstimatedOutput","selectedNode","buildingMultiplier","multipliers","id","globalBuff","defaultEdgeOptions","type","BezierEdge","style","stroke","markerEnd","MarkerType","ArrowClosed","nodeTypes","custom","data","background","border","borderRadius","padding","width","height","display","flexDirection","justifyContent","alignItems","fontSize","textAlign","Handle","position","Position","Top","isConnectable","inputs","length","component","map","input","resource","amount","join","label","outputs","output","Bottom","_ref2","onClose","calculateBuildings","calculateAdjustedProduction","requiredAmounts","selectedBuilding","specificBuildingLevels","calculationMode","nodes","setNodes","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","createNodes","useMemo","item","index","name","estimatedBuildings","requiredLevels","originalId","x","y","createEdges","flatMap","itemIndex","nodeIndex","filter","some","sourceNode","source","target","sourcePosition","targetPosition","animated","strokeWidth","useEffect","layoutedNodes","layoutedEdges","direction","arguments","undefined","dagreGraph","dagre","Graph","setDefaultEdgeLabel","setGraph","rankdir","forEach","setNode","edge","setEdge","nodeWithPosition","nodeWidth","nodeHeight","getLayoutedElements","onConnect","useCallback","params","eds","IconButton","onClick","top","right","zIndex","bgcolor","CloseIcon","ReactFlow","fitView","Background","Controls","ProductChainCalc","_buildingsData$find","setState","useState","showAllItems","setShowAllItems","showGraph","setShowGraph","graph","setCalculationMode","Map","buildingsData","building","flow","result","queue","visited","Set","currentBuildingId","parentId","shift","has","add","get","Object","entries","multiplier","specificBuildingLevel","push","_ref3","inputResource","inputAmount","inputBuilding","Array","from","values","find","b","keys","includes","inputRequiredLevels","calculateUniqueResourceFlow","parseInt","parentIds","set","_ref4","_ref5","_ref6","_ref7","_ref8","calculateCombinedResourceFlow","chainData","nodeId","outputPerLevel","totalOutput","processChainData","prevState","sortedBuildings","ev","sort","a","localeCompare","handleInputChange","field","value","Paper","elevation","p","maxWidth","mx","PageHeader","Grid","container","spacing","xs","sm","Select","onChange","e","fullWidth","MenuItem","FormControlLabel","control","Checkbox","checked","TextField","inputProps","min","step","RadioGroup","row","Radio","_Fragment","Button","mt","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","whiteSpace","i","toFixed","o","handleMultiplierChange","buildingId","parseFloat","handleSpecificBuildingLevelChange","gap","Modal","open","left","transform","boxShadow","ProductChainGraph"],"sourceRoot":""}