{"version":3,"file":"static/js/594.2c2b197f.chunk.js","mappings":"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","sources":["components/PageHeader.js","components/TooltipTextField.js","pages/cividle/GPEfficient.js","utils/cividlehelpers.js","../node_modules/@mui/material/MenuItem/menuItemClasses.js","../node_modules/@mui/material/MenuItem/MenuItem.js"],"sourcesContent":["// src/components/PageHeader.js\r\nimport React from 'react';\r\nimport { Typography, Box } from '@mui/material';\r\n\r\nconst PageHeader = ({ title, description }) => {\r\n  return (\r\n    <Box sx={{ mb: 4 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      {description && (\r\n        <Typography \r\n          variant=\"subtitle1\" \r\n          sx={{ \r\n            mb: 3, \r\n            fontStyle: 'italic',\r\n            color: 'text.secondary',\r\n            borderLeft: '4px solid',\r\n            borderColor: 'primary.main',\r\n            pl: 2\r\n          }}\r\n        >\r\n          {description}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PageHeader;","import React from 'react';\r\nimport { TextField, Tooltip, IconButton } from '@mui/material';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\n\r\nconst TooltipTextField = ({ tooltip, ...props }) => {\r\n  return (\r\n    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n      <TextField {...props} />\r\n      <Tooltip title={tooltip} arrow placement=\"top\">\r\n        <IconButton size=\"small\" style={{ marginLeft: '8px' }}>\r\n          <HelpOutlineIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TooltipTextField;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Select, MenuItem, Grid, Typography, Paper, Box } from '@mui/material';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { calculateGPEfficiency } from '../../utils/cividlehelpers';\r\nimport TooltipTextField from '../../components/TooltipTextField';\r\nimport PageHeader from '../../components/PageHeader';\r\n\r\nconst PAGE_TITLE = \"GP Efficiency Calculator\";\r\nconst PAGE_DESCRIPTION = \"This calculator helps you determine the most efficient GP (Great People) target for your current setup. You are looking for the peak of the curve, which shows when you start to hit diminishing returns, or you can look at how long it will take to get to a certain number of GPs.\"\r\n\r\n\r\nconst GPEfficient = () => {\r\n  const [currentGP, setCurrentGP] = useState('0');\r\n  const [setupTime, setSetupTime] = useState('');\r\n  const [evPerSecond, setEvPerSecond] = useState('');\r\n  const [evUnit, setEvUnit] = useState('K');\r\n  const [chartData, setChartData] = useState(null);\r\n  const [error, setError] = useState('');\r\n\r\n\tconst EfficiencyTooltip = ({ active, payload, label }) => {\r\n\t  if (active && payload && payload.length) {\r\n\t\treturn (\r\n\t\t  <div style={{ backgroundColor: 'white', color: '#202020', padding: '10px', border: '1px solid #ccc' }}>\r\n\t\t\t<p>{`GP Count: ${label}`}</p>\r\n\t\t\t<p>{`Efficiency: ${payload[0].value.toFixed(2)} GP/Hour`}</p>\r\n\t\t  </div>\r\n\t\t);\r\n\t  }\r\n\t  return null;\r\n\t};\r\n\r\n\tconst TimeTooltip = ({ active, payload, label }) => {\r\n\t  if (active && payload && payload.length) {\r\n\t\treturn (\r\n\t\t  <div style={{ backgroundColor: 'white', padding: '10px', border: '1px solid #ccc' }}>\r\n\t\t\t<p>{`GP Count: ${label}`}</p>\r\n\t\t\t<p>{`Time: ${payload[0].value.toFixed(2)} Hours`}</p>\r\n\t\t  </div>\r\n\t\t);\r\n\t  }\r\n\t  return null;\r\n\t};\r\n\r\n\r\n  const updateChartData = useCallback(() => {\r\n    if (setupTime && evPerSecond) {\r\n      try {\r\n        const result = calculateGPEfficiency(currentGP, setupTime, evPerSecond, evUnit);\r\n        setChartData(result);\r\n        setError('');\r\n      } catch (err) {\r\n        setError('Error in calculation. Please check your inputs.');\r\n      }\r\n    } else {\r\n      setChartData(null);\r\n      setError('');\r\n    }\r\n  }, [currentGP, setupTime, evPerSecond, evUnit]);\r\n\r\n  useEffect(() => {\r\n    updateChartData();\r\n  }, [updateChartData]);\r\n\r\n   return (\r\n    <Paper elevation={3} sx={{ p: 3, maxWidth: 800, mx: 'auto' }}>\r\n      <PageHeader title={PAGE_TITLE} description={PAGE_DESCRIPTION} />  \r\n      <Box sx={{ mb: 3, bgcolor: 'background.paper', p: 2, borderRadius: 1 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item xs={12} sm={4}>\r\n            <Typography variant=\"subtitle1\" fontWeight=\"medium\">Setup Time (hours)</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={8}>\r\n            <TooltipTextField\r\n              tooltip=\"Enter the time spent setting up your production in hours. This can be found on your capital. Most accurate if the number is from right before the EV start up.\"\r\n              type=\"number\"\r\n              value={setupTime}\r\n              onChange={(e) => setSetupTime(e.target.value)}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n              inputProps={{ step: 'any' }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <Typography variant=\"subtitle1\" fontWeight=\"medium\">EV/second</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} sm={5}>\r\n            <TooltipTextField\r\n              tooltip=\"Enter your current EV production per second. Can be found at the top info bar, right side.\"\r\n              type=\"number\"\r\n              value={evPerSecond}\r\n              onChange={(e) => setEvPerSecond(e.target.value)}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n              inputProps={{ step: 'any' }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4} sm={3}>\r\n            <Select\r\n              value={evUnit}\r\n              onChange={(e) => setEvUnit(e.target.value)}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n            >\r\n              {['K', 'M', 'B', 'T', 'Q'].map((unit) => (\r\n                <MenuItem key={unit} value={unit}>{unit}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <Typography variant=\"subtitle1\" fontWeight=\"medium\">Current GP Count</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={8}>\r\n            <TooltipTextField\r\n              tooltip=\"(Optional) Enter your current GP count. This will increase the accuracy if you are already in your EV run.\"\r\n              type=\"number\"\r\n              value={currentGP}\r\n              onChange={(e) => setCurrentGP(e.target.value)}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n              inputProps={{ step: 'any' }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Box sx={{ mt: 2, color: 'error.main' }}>\r\n          <Typography>{error}</Typography>\r\n        </Box>\r\n      )}\r\n\r\n      {chartData && (\r\n        <>\r\n          <Box sx={{ mt: 4 }}>\r\n            <Typography variant=\"h6\" gutterBottom>Efficiency Chart</Typography>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <LineChart data={chartData.lineChart1Data}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"x\" type=\"number\" label={{ value: 'GP Count', position: 'insideBottom', offset: -5 }} />\r\n                <YAxis domain={['auto', 'auto']} label={{ value: 'GP/Hour', angle: -90, position: 'insideLeft' }} />\r\n                <Tooltip content={<EfficiencyTooltip />} />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"y\" name=\"Efficiency\" stroke=\"#8884d8\" dot={false} />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </Box>\r\n\r\n          <Box sx={{ mt: 4 }}>\r\n            <Typography variant=\"h6\" gutterBottom>Time to Reach GP Chart</Typography>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <LineChart data={chartData.lineChart2Data}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"x\" type=\"number\" label={{ value: 'GP Count', position: 'insideBottom', offset: -5 }} />\r\n                <YAxis domain={[0, 'auto']} label={{ value: 'Hours', angle: -90, position: 'insideLeft' }} />\r\n                <Tooltip content={<TimeTooltip />} />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"y\" name=\"Time\" stroke=\"#82ca9d\" dot={false} />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </Box>\r\n        </>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default GPEfficient;","import eraData from '../data/eraData.json';\r\n\r\nexport const convertInputUsingLetterUnitToNumber = (value, unit) => {\r\n  const unitMultipliers = {\r\n    'K': 1e3,\r\n    'M': 1e6,\r\n    'B': 1e9,\r\n    'T': 1e12,\r\n    'Q': 1e15\r\n  };\r\n  return parseFloat(value) * (unitMultipliers[unit] || 1);\r\n};\r\n\r\nexport const convertNumberToDecimalLetterUnit = (number) => {\r\n  const units = ['', 'K', 'M', 'B', 'T', 'Q'];\r\n  let unitIndex = 0;\r\n  \r\n  while (number >= 1000 && unitIndex < units.length - 1) {\r\n    number /= 1000;\r\n    unitIndex++;\r\n  }\r\n  \r\n  // Determine the number of decimal places\r\n  let decimalPlaces = 2;\r\n  if (number >= 100) decimalPlaces = 1;\r\n  if (number >= 1000) decimalPlaces = 0;\r\n  \r\n  // Format the number\r\n  const formattedNumber = number.toFixed(decimalPlaces);\r\n  \r\n  // Remove trailing zeros after the decimal point\r\n  const trimmedNumber = formattedNumber.replace(/\\.?0+$/, '');\r\n  \r\n  return `${trimmedNumber} ${units[unitIndex]}`.trim();\r\n};\r\n\r\nexport const calculateScienceTime = (values, units) => {\r\n\r\n\r\n  const [sciencePerSec, scienceSaved, scienceNeeded] = values.map((value, index) => \r\n    convertInputUsingLetterUnitToNumber(value, units[index])\r\n  );\r\n\r\n  if (sciencePerSec <= 0 || isNaN(scienceSaved) || isNaN(scienceNeeded)) {\r\n    return { error: \"Invalid input. Please check your values.\" };\r\n  }\r\n\r\n  const timeInTicks = Math.max(0, Math.round((scienceNeeded - scienceSaved) / sciencePerSec));\r\n  \r\n  const timespan = formatTicksToDayHourMinuteSec(timeInTicks)\r\n\r\n  return {\r\n    ticks: timeInTicks,\r\n    timespan: timespan\r\n  };\r\n};\r\n\r\nconst getEVCostFromGPCount = (gpCount) => {\r\n\treturn parseFloat(Math.pow((gpCount*400), 3));\r\n};\r\n\r\nexport const calculateGPEfficiency = (currentGP, setupTime, evPerSecond, evUnit) => {\r\n  const currentGPFloat = parseFloat(currentGP);\r\n  const setupTimeSeconds = parseFloat(setupTime) * 3600; // Convert hours to seconds\r\n  const evPerSecondValue = convertInputUsingLetterUnitToNumber(evPerSecond, evUnit);\r\n\r\n  const currentGPCountEVCost = getEVCostFromGPCount(currentGPFloat);\r\n  const timeToCurrentGPCountSeconds = currentGPCountEVCost / evPerSecondValue;\r\n  const adjustedRunTimeSeconds = setupTimeSeconds - timeToCurrentGPCountSeconds;\r\n\r\n  const lineChart1Data = [];\r\n  const lineChart2Data = [];\r\n\r\n  for (let x = 0; x <= 3000; x += 1) {\r\n    const futureGPCount = currentGPFloat + x;\r\n    const costDifferenceEVCurrentToFuture = getEVCostFromGPCount(futureGPCount) - currentGPCountEVCost;\r\n    const timeDifferenceCurrentToFutureSeconds = costDifferenceEVCurrentToFuture / evPerSecondValue;\r\n    const projectedTotalRunTimeSecond = adjustedRunTimeSeconds + timeDifferenceCurrentToFutureSeconds;\r\n    const projectedTotalRunTimeHours = projectedTotalRunTimeSecond / 3600;\r\n    const futureGPperHour = futureGPCount / projectedTotalRunTimeHours;\r\n    lineChart1Data.push({ x: futureGPCount, y: futureGPperHour });\r\n    lineChart2Data.push({ x: futureGPCount, y: projectedTotalRunTimeHours });\r\n  }\r\n\r\n  return {\r\n    lineChart1Data,\r\n    lineChart2Data,\r\n    inputValues: { currentGP, setupTime, evPerSecond, evUnit },\r\n  };\r\n};\r\n\r\nexport const getEraData = (sciencePerSec) => {\r\n  return eraData.slice(0, 20).map(era => {\r\n    const timeToReach = Math.ceil(era.EraCost / sciencePerSec);\r\n    return {\r\n      ...era,\r\n      TimeToReach: formatTicksToDayHourMinuteSec(timeToReach)\r\n    };\r\n  });\r\n};\r\n\r\nconst formatTicksToDayHourMinuteSec = (seconds) => {\r\n  const days = Math.floor(seconds / 86400);\r\n  const hours = Math.floor((seconds % 86400) / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const remainingSeconds = seconds % 60;\r\n\r\n  const parts = [];\r\n\r\n  if (days > 0) parts.push(`${days}d`);\r\n  if (hours > 0) parts.push(`${hours}h`);\r\n  if (minutes > 0) parts.push(`${minutes}m`);\r\n  if (remainingSeconds > 0 || parts.length === 0) parts.push(`${remainingSeconds}s`);\r\n\r\n  return parts.join(' ');\r\n};\r\n\r\nexport const eFormatTime = (hours) => {\r\n  const days = Math.floor(hours / 24);\r\n  const remainingHours = hours % 24;\r\n  return `${days}d ${remainingHours.toFixed(2)}h`;\r\n};\r\n\r\nexport const buildGraph = (buildings) => {\r\n  const graph = {};\r\n\r\n  // Initialize nodes\r\n  for (const building of buildings) {\r\n    graph[building.id] = { building, inEdges: [], outEdges: [] };\r\n  }\r\n\r\n  // Connect nodes\r\n  for (const [id, node] of Object.entries(graph)) {\r\n    for (const output in node.building.output) {\r\n      for (const [otherId, otherNode] of Object.entries(graph)) {\r\n        if (otherId !== id && output in otherNode.building.input) {\r\n          node.outEdges.push(otherId);\r\n          otherNode.inEdges.push(id);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return graph;\r\n};\r\n\r\nexport const calculateResourceFlow = (graph, startNodeId, multipliers, globalBuff) => {\r\n  const flow = { ratios: {}, relevantBuildings: new Set(), requiredAmounts: {} };\r\n  const visited = new Set();\r\n\r\n  const dfs = (nodeId, requiredAmount = 1) => {\r\n    flow.relevantBuildings.add(nodeId);\r\n    \r\n    const node = graph[nodeId];\r\n    const nodeMultiplier = (multipliers[nodeId] || 1) + globalBuff;\r\n    \r\n    // Initialize or update the required amount for this node\r\n    flow.requiredAmounts[nodeId] = (flow.requiredAmounts[nodeId] || 0) + requiredAmount;\r\n    \r\n    // Only process inputs if we haven't visited this node or if we need more of its output\r\n    if (!visited.has(nodeId) || flow.requiredAmounts[nodeId] > flow.ratios[nodeId]) {\r\n      visited.add(nodeId);\r\n      \r\n      // Calculate the ratio for this node\r\n      const outputAmount = Object.values(node.building.output)[0] * nodeMultiplier;\r\n      flow.ratios[nodeId] = flow.requiredAmounts[nodeId] / outputAmount;\r\n\r\n      // Recurse through input edges\r\n      for (const [inputResource, inputAmount] of Object.entries(node.building.input)) {\r\n        for (const inNodeId of node.inEdges) {\r\n          const inNode = graph[inNodeId];\r\n          if (inputResource in inNode.building.output) {\r\n            const requiredInputAmount = inputAmount * flow.ratios[nodeId];\r\n            dfs(inNodeId, requiredInputAmount);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  dfs(startNodeId);\r\n  return flow;\r\n};\r\n\r\nexport const processChainData = (flow, graph) => {\r\n  return Array.from(flow.relevantBuildings).map(buildingId => {\r\n    const building = graph[buildingId].building;\r\n    return {\r\n      id: buildingId,\r\n      name: building.name,\r\n      input: formatResourceObject(building.input),\r\n      output: formatResourceObject(building.output),\r\n      ratio: flow.ratios[buildingId],\r\n      requiredAmount: flow.requiredAmounts[buildingId]\r\n    };\r\n  }).sort((a, b) => a.name.localeCompare(b.name));\r\n};\r\n\r\nconst formatResourceObject = (obj) => {\r\n  return Object.entries(obj)\r\n    .map(([key, value]) => `${key}: ${value}`)\r\n    .join('\\n');\r\n};","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getMenuItemUtilityClass(slot) {\n  return generateUtilityClass('MuiMenuItem', slot);\n}\nconst menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);\nexport default menuItemClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"autoFocus\", \"component\", \"dense\", \"divider\", \"disableGutters\", \"focusVisibleClassName\", \"role\", \"tabIndex\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport ListContext from '../List/ListContext';\nimport ButtonBase from '../ButtonBase';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useForkRef from '../utils/useForkRef';\nimport { dividerClasses } from '../Divider';\nimport { listItemIconClasses } from '../ListItemIcon';\nimport { listItemTextClasses } from '../ListItemText';\nimport menuItemClasses, { getMenuItemUtilityClass } from './menuItemClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    dense,\n    divider,\n    disableGutters,\n    selected,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']\n  };\n  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst MenuItemRoot = styled(ButtonBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiMenuItem',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({}, theme.typography.body1, {\n  display: 'flex',\n  justifyContent: 'flex-start',\n  alignItems: 'center',\n  position: 'relative',\n  textDecoration: 'none',\n  minHeight: 48,\n  paddingTop: 6,\n  paddingBottom: 6,\n  boxSizing: 'border-box',\n  whiteSpace: 'nowrap'\n}, !ownerState.disableGutters && {\n  paddingLeft: 16,\n  paddingRight: 16\n}, ownerState.divider && {\n  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,\n  backgroundClip: 'padding-box'\n}, {\n  '&:hover': {\n    textDecoration: 'none',\n    backgroundColor: (theme.vars || theme).palette.action.hover,\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  [`&.${menuItemClasses.selected}`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    [`&.${menuItemClasses.focusVisible}`]: {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n    }\n  },\n  [`&.${menuItemClasses.selected}:hover`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n    }\n  },\n  [`&.${menuItemClasses.focusVisible}`]: {\n    backgroundColor: (theme.vars || theme).palette.action.focus\n  },\n  [`&.${menuItemClasses.disabled}`]: {\n    opacity: (theme.vars || theme).palette.action.disabledOpacity\n  },\n  [`& + .${dividerClasses.root}`]: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  [`& + .${dividerClasses.inset}`]: {\n    marginLeft: 52\n  },\n  [`& .${listItemTextClasses.root}`]: {\n    marginTop: 0,\n    marginBottom: 0\n  },\n  [`& .${listItemTextClasses.inset}`]: {\n    paddingLeft: 36\n  },\n  [`& .${listItemIconClasses.root}`]: {\n    minWidth: 36\n  }\n}, !ownerState.dense && {\n  [theme.breakpoints.up('sm')]: {\n    minHeight: 'auto'\n  }\n}, ownerState.dense && _extends({\n  minHeight: 32,\n  // https://m2.material.io/components/menus#specs > Dense\n  paddingTop: 4,\n  paddingBottom: 4\n}, theme.typography.body2, {\n  [`& .${listItemIconClasses.root} svg`]: {\n    fontSize: '1.25rem'\n  }\n})));\nconst MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiMenuItem'\n  });\n  const {\n      autoFocus = false,\n      component = 'li',\n      dense = false,\n      divider = false,\n      disableGutters = false,\n      focusVisibleClassName,\n      role = 'menuitem',\n      tabIndex: tabIndexProp,\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const context = React.useContext(ListContext);\n  const childContext = React.useMemo(() => ({\n    dense: dense || context.dense || false,\n    disableGutters\n  }), [context.dense, dense, disableGutters]);\n  const menuItemRef = React.useRef(null);\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      if (menuItemRef.current) {\n        menuItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error('MUI: Unable to set focus to a MenuItem whose component has not been rendered.');\n      }\n    }\n  }, [autoFocus]);\n  const ownerState = _extends({}, props, {\n    dense: childContext.dense,\n    divider,\n    disableGutters\n  });\n  const classes = useUtilityClasses(props);\n  const handleRef = useForkRef(menuItemRef, ref);\n  let tabIndex;\n  if (!props.disabled) {\n    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;\n  }\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(MenuItemRoot, _extends({\n      ref: handleRef,\n      role: role,\n      tabIndex: tabIndex,\n      component: component,\n      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n      className: clsx(classes.root, className)\n    }, other, {\n      ownerState: ownerState,\n      classes: classes\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the list item is focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n   * The prop defaults to the value inherited from the parent Menu component.\n   * @default false\n   */\n  dense: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, a 1px light border is added to the bottom of the menu item.\n   * @default false\n   */\n  divider: PropTypes.bool,\n  /**\n   * This prop can help identify which element has keyboard focus.\n   * The class name will be applied when the element gains the focus through keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * @ignore\n   */\n  role: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * If `true`, the component is selected.\n   * @default false\n   */\n  selected: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * @default 0\n   */\n  tabIndex: PropTypes.number\n} : void 0;\nexport default MenuItem;"],"names":["_ref","title","description","_jsxs","Box","sx","mb","children","_jsx","Typography","variant","gutterBottom","fontStyle","color","borderLeft","borderColor","pl","tooltip","props","style","display","alignItems","TextField","Tooltip","arrow","placement","IconButton","size","marginLeft","HelpOutlineIcon","fontSize","GPEfficient","currentGP","setCurrentGP","useState","setupTime","setSetupTime","evPerSecond","setEvPerSecond","evUnit","setEvUnit","chartData","setChartData","error","setError","EfficiencyTooltip","active","payload","label","length","backgroundColor","padding","border","concat","value","toFixed","TimeTooltip","_ref2","updateChartData","useCallback","result","calculateGPEfficiency","err","useEffect","Paper","elevation","p","maxWidth","mx","PageHeader","bgcolor","borderRadius","Grid","container","spacing","item","xs","sm","fontWeight","TooltipTextField","type","onChange","e","target","fullWidth","inputProps","step","Select","map","unit","MenuItem","mt","_Fragment","ResponsiveContainer","width","height","LineChart","data","lineChart1Data","CartesianGrid","strokeDasharray","XAxis","dataKey","position","offset","YAxis","domain","angle","content","Legend","Line","name","stroke","dot","lineChart2Data","convertInputUsingLetterUnitToNumber","parseFloat","calculateScienceTime","values","units","sciencePerSec","scienceSaved","scienceNeeded","index","isNaN","timeInTicks","Math","max","round","ticks","timespan","formatTicksToDayHourMinuteSec","getEVCostFromGPCount","gpCount","pow","currentGPFloat","setupTimeSeconds","evPerSecondValue","currentGPCountEVCost","adjustedRunTimeSeconds","x","futureGPCount","projectedTotalRunTimeHours","futureGPperHour","push","y","inputValues","getEraData","eraData","slice","era","timeToReach","ceil","EraCost","TimeToReach","seconds","days","floor","hours","minutes","remainingSeconds","parts","join","getMenuItemUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","MenuItemRoot","styled","ButtonBase","shouldForwardProp","prop","rootShouldForwardProp","overridesResolver","styles","ownerState","root","dense","divider","disableGutters","gutters","theme","_extends","typography","body1","justifyContent","textDecoration","minHeight","paddingTop","paddingBottom","boxSizing","whiteSpace","paddingLeft","paddingRight","borderBottom","vars","palette","backgroundClip","action","hover","menuItemClasses","selected","primary","mainChannel","selectedOpacity","alpha","main","focusVisible","focusOpacity","hoverOpacity","focus","disabled","opacity","disabledOpacity","dividerClasses","marginTop","marginBottom","inset","listItemTextClasses","listItemIconClasses","minWidth","breakpoints","up","body2","React","inProps","ref","useDefaultProps","autoFocus","component","focusVisibleClassName","role","tabIndex","tabIndexProp","className","other","_objectWithoutPropertiesLoose","context","ListContext","childContext","menuItemRef","useEnhancedEffect","current","classes","slots","composedClasses","composeClasses","useUtilityClasses","handleRef","useForkRef","undefined","Provider","clsx"],"sourceRoot":""}