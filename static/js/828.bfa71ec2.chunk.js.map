{"version":3,"file":"static/js/828.bfa71ec2.chunk.js","mappings":"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","sources":["pages/cividle/IdleEraTime.js","utils/cividlehelpers.js","../node_modules/@mui/material/TableContainer/tableContainerClasses.js","../node_modules/@mui/material/TableContainer/TableContainer.js","../node_modules/@mui/material/styles/useTheme.js"],"sourcesContent":["// src/pages/cividle/IdleEraTime.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TextField, Typography, Paper, Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\r\nimport { getEraData } from '../../utils/cividlehelpers';\r\n\r\nconst IdleEraTime = () => {\r\n  const [sciencePerSec, setSciencePerSec] = useState('');\r\n  const [eraData, setEraData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (sciencePerSec && !isNaN(parseFloat(sciencePerSec))) {\r\n      const data = getEraData(parseFloat(sciencePerSec));\r\n      setEraData(data);\r\n    } else {\r\n      setEraData([]);\r\n    }\r\n  }, [sciencePerSec]);\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ p: 3, maxWidth: 800, mx: 'auto' }}>\r\n      <Typography variant=\"h4\" gutterBottom>CivIdle Era Time Calculator</Typography>\r\n      <Box sx={{ mb: 3, bgcolor: 'background.paper', p: 2, borderRadius: 1 }}>\r\n        <TextField\r\n          label=\"Science/sec\"\r\n          type=\"number\"\r\n          value={sciencePerSec}\r\n          onChange={(e) => setSciencePerSec(e.target.value)}\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          inputProps={{ step: 'any' }}\r\n        />\r\n      </Box>\r\n      {eraData.length > 0 && (\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Era</TableCell>\r\n                <TableCell>Era Title</TableCell>\r\n                <TableCell>Era Cost</TableCell>\r\n                <TableCell>Time to Reach</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {eraData.map((row) => (\r\n                <TableRow key={row.Era}>\r\n                  <TableCell>{row.Era}</TableCell>\r\n                  <TableCell>{row.EraTitle}</TableCell>\r\n                  <TableCell>{row.EraCost}</TableCell>\r\n                  <TableCell>{row.TimeToReach}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default IdleEraTime;","import eraData from '../data/eraData.json';\r\n\r\nexport const calculateScienceTime = (values, units) => {\r\n  const unitMultipliers = {\r\n    'K': 1e3,\r\n    'M': 1e6,\r\n    'B': 1e9,\r\n    'T': 1e12,\r\n    'Q': 1e15\r\n  };\r\n\r\n  const [sciencePerSec, scienceSaved, scienceNeeded] = values.map((value, index) => \r\n    parseFloat(value) * unitMultipliers[units[index]]\r\n  );\r\n\r\n  if (sciencePerSec <= 0 || isNaN(scienceSaved) || isNaN(scienceNeeded)) {\r\n    return { error: \"Invalid input. Please check your values.\" };\r\n  }\r\n\r\n  const timeInTicks = Math.max(0, Math.round((scienceNeeded - scienceSaved) / sciencePerSec));\r\n  \r\n  const timespan = formatTime(timeInTicks)\r\n\r\n  return {\r\n    ticks: timeInTicks,\r\n    timespan: timespan\r\n  };\r\n};\r\n\r\nexport const calculateGPEfficiency = (currentGP, setupTime, evPerSecond, evUnit) => {\r\n  const unitMultipliers = {\r\n    'K': 1e-3,\r\n    'M': 1,\r\n    'B': 1e3,\r\n    'T': 1e6,\r\n    'Q': 1e9\r\n  };\r\n\r\n  const evPerSecondInMillions = parseFloat(evPerSecond) * unitMultipliers[evUnit];\r\n  const setupTimeFloat = parseFloat(setupTime);\r\n\r\n  const lineChart1Data = [];\r\n  const lineChart2Data = [];\r\n  const debugData = [];\r\n\r\n  let peakEfficiencyX = 0;\r\n  let prevY1 = 0;\r\n\r\n  // Generate chart data for the full range\r\n  for (let x = 0; x <= 2000; x += 25) {\r\n    const baseCalculation = (64 * Math.pow(x, 3)) / evPerSecondInMillions / 3600;\r\n    const y1 = x / (baseCalculation + setupTimeFloat);\r\n    const y2 = baseCalculation + setupTimeFloat;\r\n\r\n    lineChart1Data.push({ x, y: y1 });\r\n    lineChart2Data.push({ x, y: y2 });\r\n\r\n    if (x % 200 === 0) {\r\n      debugData.push({ x, evPerSecondInMillions, baseCalculation, y1, y2 });\r\n    }\r\n\r\n    // Check for peak efficiency (only for x > 0 to avoid division by zero)\r\n    if (x > 0 && y1 < prevY1 && peakEfficiencyX === 0) {\r\n      peakEfficiencyX = x;\r\n    }\r\n\r\n    prevY1 = y1;\r\n  }\r\n\r\n  // Fine-tune the peak efficiency x value\r\n  if (peakEfficiencyX > 0) {\r\n\r\n    prevY1 = 0;\r\n    for (let x = (peakEfficiencyX - 25); x < peakEfficiencyX + 25; x++) {\r\n      const baseCalculation = (64 * Math.pow(x, 3)) / evPerSecondInMillions / 3600;\r\n      const y1 = x / (baseCalculation + setupTimeFloat);\r\n\r\n      if (y1 < prevY1) {\r\n        peakEfficiencyX = x - 1;\r\n        break;\r\n      }\r\n\r\n      prevY1 = y1;\r\n    }\r\n  }\r\n\r\n  return {\r\n    lineChart1Data,\r\n    lineChart2Data,\r\n    integerValue: peakEfficiencyX,\r\n    debugData,\r\n    inputValues: { currentGP, setupTime, evPerSecond, evUnit }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const getEraData = (sciencePerSec) => {\r\n  return eraData.slice(0, 20).map(era => {\r\n    const timeToReach = Math.ceil(era.EraCost / sciencePerSec);\r\n    return {\r\n      ...era,\r\n      TimeToReach: formatTime(timeToReach)\r\n    };\r\n  });\r\n};\r\n\r\nconst formatTime = (seconds) => {\r\n  const days = Math.floor(seconds / 86400);\r\n  const hours = Math.floor((seconds % 86400) / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const remainingSeconds = seconds % 60;\r\n\r\n  const parts = [];\r\n\r\n  if (days > 0) parts.push(`${days}d`);\r\n  if (hours > 0) parts.push(`${hours}h`);\r\n  if (minutes > 0) parts.push(`${minutes}m`);\r\n  if (remainingSeconds > 0 || parts.length === 0) parts.push(`${remainingSeconds}s`);\r\n\r\n  return parts.join(' ');\r\n};\r\n\r\nexport const buildGraph = (buildings) => {\r\n  const graph = {};\r\n\r\n  // Initialize nodes\r\n  for (const building of buildings) {\r\n    graph[building.id] = { building, inEdges: [], outEdges: [] };\r\n  }\r\n\r\n  // Connect nodes\r\n  for (const [id, node] of Object.entries(graph)) {\r\n    for (const output in node.building.output) {\r\n      for (const [otherId, otherNode] of Object.entries(graph)) {\r\n        if (otherId !== id && output in otherNode.building.input) {\r\n          node.outEdges.push(otherId);\r\n          otherNode.inEdges.push(id);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return graph;\r\n};\r\n\r\nexport const calculateResourceFlow = (graph, startNodeId, multipliers, globalBuff) => {\r\n  const flow = { ratios: {}, relevantBuildings: new Set() };\r\n  const visited = new Set();\r\n\r\n  const dfs = (nodeId, requiredAmount = 1) => {\r\n    if (visited.has(nodeId)) return;\r\n    visited.add(nodeId);\r\n    flow.relevantBuildings.add(nodeId);\r\n\r\n    const node = graph[nodeId];\r\n    const nodeMultiplier = (multipliers[nodeId] || 1) + globalBuff;\r\n    \r\n    // Calculate the ratio for this node\r\n    if (nodeId === startNodeId) {\r\n      flow.ratios[nodeId] = 1; // The selected building always has a ratio of 1\r\n    } else {\r\n      const outputAmount = Object.values(node.building.output)[0] * nodeMultiplier;\r\n      flow.ratios[nodeId] = requiredAmount / outputAmount;\r\n    }\r\n\r\n    // Recurse through input edges\r\n    for (const [inputResource, inputAmount] of Object.entries(node.building.input)) {\r\n      for (const inNodeId of node.inEdges) {\r\n        const inNode = graph[inNodeId];\r\n        if (inputResource in inNode.building.output) {\r\n          const requiredInputAmount = inputAmount * flow.ratios[nodeId];\r\n          dfs(inNodeId, requiredInputAmount);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  dfs(startNodeId);\r\n  return flow;\r\n};\r\n\r\nexport const processChainData = (flow, graph) => {\r\n  return Array.from(flow.relevantBuildings).map(buildingId => {\r\n    const building = graph[buildingId].building;\r\n    return {\r\n      id: buildingId,\r\n      name: building.name,\r\n      input: formatResourceObject(building.input),\r\n      output: formatResourceObject(building.output),\r\n      ratio: flow.ratios[buildingId] \r\n    };\r\n  }).sort((a, b) => a.name.localeCompare(b.name));\r\n};\r\n\r\nconst formatResourceObject = (obj) => {\r\n  return Object.entries(obj)\r\n    .map(([key, value]) => `${key}: ${value}`)\r\n    .join('\\n');\r\n};","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableContainerUtilityClass(slot) {\n  return generateUtilityClass('MuiTableContainer', slot);\n}\nconst tableContainerClasses = generateUtilityClasses('MuiTableContainer', ['root']);\nexport default tableContainerClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableContainerUtilityClass } from './tableContainerClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableContainerUtilityClass, classes);\n};\nconst TableContainerRoot = styled('div', {\n  name: 'MuiTableContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  width: '100%',\n  overflowX: 'auto'\n});\nconst TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableContainer'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TableContainerRoot, _extends({\n    ref: ref,\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `Table`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableContainer;","'use client';\n\nimport * as React from 'react';\nimport { useTheme as useThemeSystem } from '@mui/system';\nimport defaultTheme from './defaultTheme';\nimport THEME_ID from './identifier';\nexport default function useTheme() {\n  const theme = useThemeSystem(defaultTheme);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(theme);\n  }\n  return theme[THEME_ID] || theme;\n}"],"names":["IdleEraTime","sciencePerSec","setSciencePerSec","useState","eraData","setEraData","useEffect","isNaN","parseFloat","data","getEraData","_jsxs","Paper","elevation","sx","p","maxWidth","mx","children","_jsx","Typography","variant","gutterBottom","Box","mb","bgcolor","borderRadius","TextField","label","type","value","onChange","e","target","fullWidth","inputProps","step","length","TableContainer","component","Table","TableHead","TableRow","TableCell","TableBody","map","row","Era","EraTitle","EraCost","TimeToReach","calculateScienceTime","values","units","unitMultipliers","scienceSaved","scienceNeeded","index","error","timeInTicks","Math","max","round","ticks","timespan","formatTime","calculateGPEfficiency","currentGP","setupTime","evPerSecond","evUnit","evPerSecondInMillions","setupTimeFloat","lineChart1Data","lineChart2Data","debugData","peakEfficiencyX","prevY1","x","baseCalculation","pow","y1","y2","push","y","integerValue","inputValues","slice","era","timeToReach","ceil","seconds","days","floor","hours","minutes","remainingSeconds","parts","concat","join","buildGraph","buildings","graph","building","id","inEdges","outEdges","node","Object","entries","output","otherId","otherNode","input","calculateResourceFlow","startNodeId","multipliers","globalBuff","flow","ratios","relevantBuildings","Set","visited","dfs","nodeId","requiredAmount","arguments","undefined","has","add","nodeMultiplier","outputAmount","inputResource","inputAmount","inNodeId","requiredInputAmount","processChainData","Array","from","buildingId","name","formatResourceObject","ratio","sort","a","b","localeCompare","obj","_ref","key","getTableContainerUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableContainerRoot","styled","overridesResolver","props","styles","root","width","overflowX","React","inProps","ref","useDefaultProps","className","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx","useTheme","theme","useThemeSystem","defaultTheme","THEME_ID"],"sourceRoot":""}