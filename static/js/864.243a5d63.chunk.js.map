{"version":3,"file":"static/js/864.243a5d63.chunk.js","mappings":"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","sources":["pages/cividle/ProductChainCalc.js","utils/cividlehelpers.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { TextField, Select, MenuItem, Grid, Typography, Paper, Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Checkbox, FormControlLabel } from '@mui/material';\r\nimport { buildGraph, calculateResourceFlow, processChainData } from '../../utils/cividlehelpers';\r\nimport buildingsData from '../../data/buildingData.json';\r\n\r\nconst ProductChainCalc = () => {\r\n  const [selectedBuilding, setSelectedBuilding] = useState('');\r\n  const [chain, setChain] = useState([]);\r\n  const [multipliers, setMultipliers] = useState({});\r\n  const [graph, setGraph] = useState(null);\r\n  const [showAllItems, setShowAllItems] = useState(false);\r\n  const [globalBuff, setGlobalBuff] = useState(0);\r\n  const [buildingCount, setBuildingCount] = useState('');\r\n  const [buildingLevel, setBuildingLevel] = useState('');\r\n  const [totalBuildingLevels, setTotalBuildingLevels] = useState('');\r\n  const [specificBuildingLevels, setSpecificBuildingLevels] = useState({});\r\n\r\n  useEffect(() => {\r\n    setGraph(buildGraph(buildingsData));\r\n  }, []);\r\n\r\n  const calculateChain = () => {\r\n    const flow = calculateResourceFlow(graph, selectedBuilding, multipliers, globalBuff);\r\n    const chainData = processChainData(flow, graph);\r\n    setChain(chainData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedBuilding && graph) {\r\n      calculateChain();\r\n    }\r\n  }, [selectedBuilding, multipliers, graph, globalBuff, buildingCount, buildingLevel, totalBuildingLevels]);\r\n\r\n  const handleMultiplierChange = (buildingId, value) => {\r\n    setMultipliers(prev => ({\r\n      ...prev,\r\n      [buildingId]: parseFloat(value) || 1\r\n    }));\r\n  };\r\n\r\n  const sortedBuildings = useMemo(() => {\r\n    return [...buildingsData]\r\n      .filter(building => showAllItems || building.ev)\r\n      .sort((a, b) => a.name.localeCompare(b.name));\r\n  }, [showAllItems]);\r\n\r\n  const getBuildingLevels = () => {\r\n    if (totalBuildingLevels) return parseInt(totalBuildingLevels);\r\n    if (buildingCount && buildingLevel) return parseInt(buildingCount) * parseInt(buildingLevel);\r\n    return 1;\r\n  };\r\n\r\n  const formatRatio = (ratio) => {\r\n    return ratio.toFixed(3).replace(/\\.?0+$/, '');\r\n  };\r\n\r\n  const calculateSubtotal = () => {\r\n    return Math.ceil(chain.reduce((sum, row) => sum + row.ratio * getBuildingLevels(), 0));\r\n  };\r\n\r\n  const calculateDividedSubtotal = () => {\r\n    const subtotal = calculateSubtotal();\r\n    const divisor = buildingLevel ? parseInt(buildingLevel) : 20;\r\n    return Math.ceil(subtotal / divisor);\r\n  };\r\n\r\n  const calculateEstimatedOutput = () => {\r\n    if (!selectedBuilding || chain.length === 0) return null;\r\n    \r\n    const selectedBuildingData = chain.find(item => item.id === selectedBuilding);\r\n    if (!selectedBuildingData) return null;\r\n\r\n    const buildingLevels = Math.ceil(selectedBuildingData.ratio * getBuildingLevels());\r\n    const buildingMultiplier = multipliers[selectedBuilding] || 1;\r\n    \r\n    return Math.ceil((buildingMultiplier + globalBuff) * buildingLevels);\r\n  };\r\n\r\nconst handleSpecificBuildingLevelChange = (buildingId, value) => {\r\n    setSpecificBuildingLevels(prev => ({\r\n      ...prev,\r\n      [buildingId]: value === '' ? null : parseInt(value)\r\n    }));\r\n  };\r\n\r\n  const getBuildingLevelForCalculation = (buildingId) => {\r\n    if (specificBuildingLevels[buildingId]) return specificBuildingLevels[buildingId];\r\n    if (buildingLevel) return parseInt(buildingLevel);\r\n    return 1;\r\n  };\r\n\r\n  const calculateBuildings = (ratio, buildingId) => {\r\n    const levels = Math.ceil(ratio * getBuildingLevels());\r\n    const buildingLevel = getBuildingLevelForCalculation(buildingId);\r\n    return Math.ceil(levels / buildingLevel);\r\n  };\r\n\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      <Typography variant=\"h4\" gutterBottom>Product Chain Calculator</Typography>\r\n      <Box sx={{ mb: 3 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item xs={12} sm={6}>\r\n            <Select\r\n              value={selectedBuilding}\r\n              onChange={(e) => setSelectedBuilding(e.target.value)}\r\n              fullWidth\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>Select a building</em>\r\n              </MenuItem>\r\n              {sortedBuildings.map(building => (\r\n                <MenuItem key={building.id} value={building.id}>{building.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={showAllItems}\r\n                  onChange={(e) => setShowAllItems(e.target.checked)}\r\n                />\r\n              }\r\n              label=\"Show All Items\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              label=\"Main Building Count\"\r\n              type=\"number\"\r\n              value={buildingCount}\r\n              onChange={(e) => setBuildingCount(e.target.value)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              label=\"Main Building Level\"\r\n              type=\"number\"\r\n              value={buildingLevel}\r\n              onChange={(e) => setBuildingLevel(e.target.value)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              label=\"(Override) Total Building Levels\"\r\n              type=\"number\"\r\n              value={totalBuildingLevels}\r\n              onChange={(e) => setTotalBuildingLevels(e.target.value)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              label=\"Global Buff\"\r\n              type=\"number\"\r\n              value={globalBuff}\r\n              onChange={(e) => setGlobalBuff(parseInt(e.target.value) || 0)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      \r\n      {chain.length > 0 && (\r\n        <>\r\n                  <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Building</TableCell>\r\n                  <TableCell>Input</TableCell>\r\n                  <TableCell>Output</TableCell>\r\n                  <TableCell>Building Specific Multiplier</TableCell>\r\n                  <TableCell>Specific Building Level</TableCell>\r\n                  <TableCell>Buildings</TableCell>\r\n                  <TableCell>Building Levels</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {chain.map((row) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell>{row.name}</TableCell>\r\n                    <TableCell style={{ whiteSpace: 'pre-line' }}>{row.input}</TableCell>\r\n                    <TableCell style={{ whiteSpace: 'pre-line' }}>{row.output}</TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        type=\"number\"\r\n                        value={multipliers[row.id] || 1}\r\n                        onChange={(e) => handleMultiplierChange(row.id, e.target.value)}\r\n                        inputProps={{ min: \"1\", step: \"0.1\", style: { width: '80px' } }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        type=\"number\"\r\n                        value={specificBuildingLevels[row.id] || ''}\r\n                        onChange={(e) => handleSpecificBuildingLevelChange(row.id, e.target.value)}\r\n                        inputProps={{ min: \"1\", step: \"1\", style: { width: '80px' } }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>{calculateBuildings(row.ratio, row.id)}</TableCell>\r\n                    <TableCell>{Math.ceil(row.ratio * getBuildingLevels())}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <Typography variant=\"subtitle1\">\r\n              {selectedBuilding && `${buildingsData.find(b => b.id === selectedBuilding)?.name} Estimated Output: ${calculateEstimatedOutput()}`}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 2 }}>\r\n              <Typography variant=\"subtitle1\">\r\n                Total Building Levels (Est): {calculateSubtotal()}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\">\r\n                Total Buildings (Est): {calculateDividedSubtotal()}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ProductChainCalc;","import eraData from '../data/eraData.json';\r\n\r\nexport const calculateScienceTime = (values, units) => {\r\n  const unitMultipliers = {\r\n    'K': 1e3,\r\n    'M': 1e6,\r\n    'B': 1e9,\r\n    'T': 1e12,\r\n    'Q': 1e15\r\n  };\r\n\r\n  const [sciencePerSec, scienceSaved, scienceNeeded] = values.map((value, index) => \r\n    parseFloat(value) * unitMultipliers[units[index]]\r\n  );\r\n\r\n  if (sciencePerSec <= 0 || isNaN(scienceSaved) || isNaN(scienceNeeded)) {\r\n    return { error: \"Invalid input. Please check your values.\" };\r\n  }\r\n\r\n  const timeInTicks = Math.max(0, Math.round((scienceNeeded - scienceSaved) / sciencePerSec));\r\n  \r\n  const timespan = formatTime(timeInTicks)\r\n\r\n  return {\r\n    ticks: timeInTicks,\r\n    timespan: timespan\r\n  };\r\n};\r\n\r\nexport const calculateGPEfficiency = (currentGP, setupTime, evPerSecond, evUnit) => {\r\n  const unitMultipliers = {\r\n    'K': 1e-3,\r\n    'M': 1,\r\n    'B': 1e3,\r\n    'T': 1e6,\r\n    'Q': 1e9\r\n  };\r\n\r\n  const evPerSecondInMillions = parseFloat(evPerSecond) * unitMultipliers[evUnit];\r\n  const setupTimeFloat = parseFloat(setupTime);\r\n\r\n  const lineChart1Data = [];\r\n  const lineChart2Data = [];\r\n  const debugData = [];\r\n\r\n  let peakEfficiencyX = 0;\r\n  let prevY1 = 0;\r\n\r\n  // Generate chart data for the full range\r\n  for (let x = 0; x <= 2000; x += 25) {\r\n    const baseCalculation = (64 * Math.pow(x, 3)) / evPerSecondInMillions / 3600;\r\n    const y1 = x / (baseCalculation + setupTimeFloat);\r\n    const y2 = baseCalculation + setupTimeFloat;\r\n\r\n    lineChart1Data.push({ x, y: y1 });\r\n    lineChart2Data.push({ x, y: y2 });\r\n\r\n    if (x % 200 === 0) {\r\n      debugData.push({ x, evPerSecondInMillions, baseCalculation, y1, y2 });\r\n    }\r\n\r\n    // Check for peak efficiency (only for x > 0 to avoid division by zero)\r\n    if (x > 0 && y1 < prevY1 && peakEfficiencyX === 0) {\r\n      peakEfficiencyX = x;\r\n    }\r\n\r\n    prevY1 = y1;\r\n  }\r\n\r\n  // Fine-tune the peak efficiency x value\r\n  if (peakEfficiencyX > 0) {\r\n\r\n    prevY1 = 0;\r\n    for (let x = (peakEfficiencyX - 25); x < peakEfficiencyX + 25; x++) {\r\n      const baseCalculation = (64 * Math.pow(x, 3)) / evPerSecondInMillions / 3600;\r\n      const y1 = x / (baseCalculation + setupTimeFloat);\r\n\r\n      if (y1 < prevY1) {\r\n        peakEfficiencyX = x - 1;\r\n        break;\r\n      }\r\n\r\n      prevY1 = y1;\r\n    }\r\n  }\r\n\r\n  return {\r\n    lineChart1Data,\r\n    lineChart2Data,\r\n    integerValue: peakEfficiencyX,\r\n    debugData,\r\n    inputValues: { currentGP, setupTime, evPerSecond, evUnit }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const getEraData = (sciencePerSec) => {\r\n  return eraData.slice(0, 20).map(era => {\r\n    const timeToReach = Math.ceil(era.EraCost / sciencePerSec);\r\n    return {\r\n      ...era,\r\n      TimeToReach: formatTime(timeToReach)\r\n    };\r\n  });\r\n};\r\n\r\nconst formatTime = (seconds) => {\r\n  const days = Math.floor(seconds / 86400);\r\n  const hours = Math.floor((seconds % 86400) / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const remainingSeconds = seconds % 60;\r\n\r\n  const parts = [];\r\n\r\n  if (days > 0) parts.push(`${days}d`);\r\n  if (hours > 0) parts.push(`${hours}h`);\r\n  if (minutes > 0) parts.push(`${minutes}m`);\r\n  if (remainingSeconds > 0 || parts.length === 0) parts.push(`${remainingSeconds}s`);\r\n\r\n  return parts.join(' ');\r\n};\r\n\r\nexport const buildGraph = (buildings) => {\r\n  const graph = {};\r\n\r\n  // Initialize nodes\r\n  for (const building of buildings) {\r\n    graph[building.id] = { building, inEdges: [], outEdges: [] };\r\n  }\r\n\r\n  // Connect nodes\r\n  for (const [id, node] of Object.entries(graph)) {\r\n    for (const output in node.building.output) {\r\n      for (const [otherId, otherNode] of Object.entries(graph)) {\r\n        if (otherId !== id && output in otherNode.building.input) {\r\n          node.outEdges.push(otherId);\r\n          otherNode.inEdges.push(id);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return graph;\r\n};\r\n\r\nexport const calculateResourceFlow = (graph, startNodeId, multipliers, globalBuff) => {\r\n  const flow = { ratios: {}, relevantBuildings: new Set() };\r\n  const visited = new Set();\r\n\r\n  const dfs = (nodeId, requiredAmount = 1) => {\r\n    if (visited.has(nodeId)) return;\r\n    visited.add(nodeId);\r\n    flow.relevantBuildings.add(nodeId);\r\n\r\n    const node = graph[nodeId];\r\n    const nodeMultiplier = (multipliers[nodeId] || 1) + globalBuff;\r\n    \r\n    // Calculate the ratio for this node\r\n    if (nodeId === startNodeId) {\r\n      flow.ratios[nodeId] = 1; // The selected building always has a ratio of 1\r\n    } else {\r\n      const outputAmount = Object.values(node.building.output)[0] * nodeMultiplier;\r\n      flow.ratios[nodeId] = requiredAmount / outputAmount;\r\n    }\r\n\r\n    // Recurse through input edges\r\n    for (const [inputResource, inputAmount] of Object.entries(node.building.input)) {\r\n      for (const inNodeId of node.inEdges) {\r\n        const inNode = graph[inNodeId];\r\n        if (inputResource in inNode.building.output) {\r\n          const requiredInputAmount = inputAmount * flow.ratios[nodeId];\r\n          dfs(inNodeId, requiredInputAmount);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  dfs(startNodeId);\r\n  return flow;\r\n};\r\n\r\nexport const processChainData = (flow, graph) => {\r\n  return Array.from(flow.relevantBuildings).map(buildingId => {\r\n    const building = graph[buildingId].building;\r\n    return {\r\n      id: buildingId,\r\n      name: building.name,\r\n      input: formatResourceObject(building.input),\r\n      output: formatResourceObject(building.output),\r\n      ratio: flow.ratios[buildingId] \r\n    };\r\n  }).sort((a, b) => a.name.localeCompare(b.name));\r\n};\r\n\r\nconst formatResourceObject = (obj) => {\r\n  return Object.entries(obj)\r\n    .map(([key, value]) => `${key}: ${value}`)\r\n    .join('\\n');\r\n};"],"names":["ProductChainCalc","_buildingsData$find","selectedBuilding","setSelectedBuilding","useState","chain","setChain","multipliers","setMultipliers","graph","setGraph","showAllItems","setShowAllItems","globalBuff","setGlobalBuff","buildingCount","setBuildingCount","buildingLevel","setBuildingLevel","totalBuildingLevels","setTotalBuildingLevels","specificBuildingLevels","setSpecificBuildingLevels","useEffect","buildGraph","buildingsData","calculateChain","flow","calculateResourceFlow","chainData","processChainData","sortedBuildings","useMemo","filter","building","ev","sort","a","b","name","localeCompare","getBuildingLevels","parseInt","calculateSubtotal","Math","ceil","reduce","sum","row","ratio","getBuildingLevelForCalculation","buildingId","calculateBuildings","levels","_jsxs","Paper","elevation","sx","p","maxWidth","mx","children","_jsx","Typography","variant","gutterBottom","Box","mb","Grid","container","spacing","alignItems","item","xs","sm","Select","value","onChange","e","target","fullWidth","MenuItem","map","id","FormControlLabel","control","Checkbox","checked","label","TextField","type","inputProps","min","step","length","_Fragment","TableContainer","component","Table","size","TableHead","TableRow","TableCell","TableBody","style","whiteSpace","input","output","handleMultiplierChange","prev","parseFloat","width","handleSpecificBuildingLevelChange","mt","display","justifyContent","concat","find","calculateEstimatedOutput","selectedBuildingData","buildingLevels","buildingMultiplier","gap","calculateDividedSubtotal","subtotal","divisor","calculateScienceTime","values","units","unitMultipliers","sciencePerSec","scienceSaved","scienceNeeded","index","isNaN","error","timeInTicks","max","round","ticks","timespan","formatTime","calculateGPEfficiency","currentGP","setupTime","evPerSecond","evUnit","evPerSecondInMillions","setupTimeFloat","lineChart1Data","lineChart2Data","debugData","peakEfficiencyX","prevY1","x","baseCalculation","pow","y1","y2","push","y","integerValue","inputValues","getEraData","eraData","slice","era","timeToReach","EraCost","TimeToReach","seconds","days","floor","hours","minutes","remainingSeconds","parts","join","buildings","inEdges","outEdges","node","Object","entries","otherId","otherNode","startNodeId","ratios","relevantBuildings","Set","visited","dfs","nodeId","requiredAmount","arguments","undefined","has","add","nodeMultiplier","outputAmount","inputResource","inputAmount","inNodeId","requiredInputAmount","Array","from","formatResourceObject","obj","_ref","key"],"sourceRoot":""}