{"version":3,"file":"static/js/878.0bfcfb3b.chunk.js","mappings":"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","sources":["components/PageHeader.js","pages/cividle/productChainUtils.js","components/ProductionNode.js","pages/cividle/ProductChainGraph.js","components/Alert.js","pages/cividle/ProductChainCalc.js"],"sourcesContent":["// src/components/PageHeader.js\r\nimport React from 'react';\r\nimport { Typography, Box } from '@mui/material';\r\n\r\nconst PageHeader = ({ title, description }) => {\r\n  return (\r\n    <Box sx={{ mb: 4 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      {description && (\r\n        <Typography \r\n          variant=\"subtitle1\" \r\n          sx={{ \r\n            mb: 3, \r\n            fontStyle: 'italic',\r\n            color: 'text.secondary',\r\n            borderLeft: '4px solid',\r\n            borderColor: 'primary.main',\r\n            pl: 2\r\n          }}\r\n        >\r\n          {description}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PageHeader;","import { BuildingData, ChainNode, ProductChainState } from './productChainTypes';\r\n\r\nexport function buildGraph(buildingsData: BuildingData[]): Map<string, BuildingData> {\r\n  return new Map(buildingsData.map(building => [building.id, building]));\r\n}\r\n\r\nexport function calculateUniqueResourceFlow(\r\n  graph,\r\n  selectedBuilding,\r\n  multipliers,\r\n  globalBuff,\r\n  buildingCount,\r\n  buildingLevel,\r\n  specificBuildingLevels = {}\r\n) {\r\n  const result = [];\r\n  const queue = [[selectedBuilding, buildingCount * buildingLevel, null, 0]];\r\n  const visited = new Map();\r\n\r\n  function calculateRequiredInput(amount, buildingId) {\r\n    const buildingMultiplier = multipliers[buildingId] ?? 1;\r\n    const totalMultiplier = buildingMultiplier + globalBuff;\r\n    return amount / totalMultiplier;\r\n  }\r\n\r\n  while (queue.length > 0) {\r\n    const [currentBuildingId, requiredLevels, parentId, pathIndex] = queue.shift();\r\n    const uniqueNodeId = `${currentBuildingId}_${parentId ?? 'root'}_${pathIndex}`;\r\n    \r\n    if (visited.has(uniqueNodeId)) continue;\r\n    visited.set(uniqueNodeId, true);\r\n\r\n    const building = graph.get(currentBuildingId);\r\n    if (!building) continue;\r\n\r\n    // First, establish the required output\r\n    const outputAmounts = Object.entries(building.output).map(([resource, amount]) => ({\r\n      resource,\r\n      amount: amount * requiredLevels\r\n    }));\r\n\r\n    // Then, calculate the required inputs based on building efficiency\r\n    const inputAmounts = Object.entries(building.input).map(([resource, amount]) => ({\r\n      resource,\r\n      amount: calculateRequiredInput(\r\n        amount * requiredLevels,\r\n        currentBuildingId\r\n      )\r\n    }));\r\n\r\n    const node = {\r\n      id: uniqueNodeId,\r\n      buildingId: currentBuildingId,\r\n      name: building.name,\r\n      input: inputAmounts,\r\n      output: outputAmounts,\r\n      requiredLevels,\r\n      parentId,\r\n      buildingCount: 1,\r\n      multiplier: multipliers[currentBuildingId] ?? 1\r\n    };\r\n\r\n    result.push(node);\r\n\r\n    let childPathIndex = pathIndex + 1;\r\n\r\n    // Process child nodes using the adjusted input requirements\r\n    inputAmounts.forEach(({ resource, amount }) => {\r\n      const inputBuilding = Array.from(graph.values()).find(b => \r\n        Object.keys(b.output).includes(resource)\r\n      );\r\n      if (inputBuilding) {\r\n        const inputBuildingOutput = inputBuilding.output[resource];\r\n        // Don't apply multiplier here as it will be handled in the next iteration\r\n        const inputRequiredLevels = amount / inputBuildingOutput;\r\n        queue.push([\r\n          inputBuilding.id, \r\n          inputRequiredLevels, \r\n          uniqueNodeId,\r\n          childPathIndex++\r\n        ]);\r\n      }\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function processChainData(flow, graph, state) {\r\n  return flow.map(node => {\r\n    const building = graph.get(node.buildingId);\r\n    if (!building) return node;\r\n\r\n    const isSelectedBuilding = node.buildingId === state.selectedBuilding;\r\n    const buildingMultiplier = state.multipliers[node.buildingId] ?? 1;\r\n    const outputAmount = Object.values(building.output)[0];\r\n    \r\n    // Only apply multiplier if it's not the selected building\r\n    const totalMultiplier = isSelectedBuilding \r\n      ? 1  // Selected building doesn't get multiplier\r\n      : buildingMultiplier + state.globalBuff;\r\n    \r\n    const outputPerLevel = outputAmount * totalMultiplier;\r\n\r\n    const estimatedBuildings = Math.ceil(node.requiredLevels / \r\n      (state.specificBuildingLevels[node.buildingId] || state.buildingLevel || 1));\r\n\r\n    return {\r\n      ...node,\r\n      buildingCount: estimatedBuildings,\r\n      multiplier: buildingMultiplier,\r\n      outputPerLevel,\r\n      totalOutput: outputPerLevel * node.requiredLevels,\r\n      estimatedBuildings,\r\n      isSelectedBuilding\r\n    };\r\n  });\r\n}\r\n\r\n\r\nexport function calculateBuildings(\r\n  node: ChainNode,\r\n  state: ProductChainState\r\n): number {\r\n  const buildingLevel = getBuildingLevelForCalculation(node.id, state);\r\n  return Math.ceil(node.requiredAmount / buildingLevel);\r\n}\r\n\r\nexport function calculateAdjustedProduction(\r\n  baseProduction: number,\r\n  node: ChainNode,\r\n  state: ProductChainState\r\n): number {\r\n  const buildingLevels = Math.ceil(node.requiredAmount * getBuildingLevels(state));\r\n  const buildingMultiplier = Math.min(99, Math.max(1, state.multipliers[node.id] || 1));\r\n  const globalBuff = Math.min(99, Math.max(0, state.globalBuff));\r\n  return baseProduction * buildingLevels * (buildingMultiplier + globalBuff);\r\n}\r\n\r\nexport function getBuildingLevelForCalculation(\r\n  buildingId,\r\n  state = {}  // Provide a default empty object\r\n) {\r\n  if (state.specificBuildingLevels && state.specificBuildingLevels[buildingId]) return state.specificBuildingLevels[buildingId];\r\n  if (state.buildingLevel) return parseInt(state.buildingLevel);\r\n  return 1;\r\n}\r\n\r\nexport function getBuildingLevels(state: ProductChainState): number {\r\n  if (state.totalBuildingLevels) return state.totalBuildingLevels;\r\n  if (state.buildingCount && state.buildingLevel) return state.buildingCount * state.buildingLevel;\r\n  return 1;\r\n}\r\n\r\nexport function calculateSubtotal(chain: ChainNode[], state: ProductChainState): number {\r\n  return Math.ceil(chain.reduce((sum, node) => sum + node.requiredAmount * getBuildingLevels(state), 0));\r\n}\r\n\r\nexport function calculateDividedSubtotal(chain: ChainNode[], state: ProductChainState): number {\r\n  const subtotal = calculateSubtotal(chain, state);\r\n  const divisor = state.buildingLevel || 20;\r\n  return Math.ceil(subtotal / divisor);\r\n}\r\n\r\nexport function calculateEstimatedOutput(selectedNode: ChainNode | null, state: ProductChainState): number | null {\r\n  if (!selectedNode) return null;\r\n  const buildingMultiplier = Math.min(99, Math.max(1, state.multipliers[selectedNode.id] || 1));\r\n  const globalBuff = Math.min(99, Math.max(0, state.globalBuff));\r\n  return Math.ceil((buildingMultiplier + globalBuff) * selectedNode.requiredAmount);\r\n}","import React from 'react';\r\nimport { Handle, Position } from 'reactflow';\r\nimport { Typography } from '@mui/material';\r\n\r\nconst INPUT_BOX_HEIGHT = 50;\r\nconst CENTER_ROW_HEIGHT = 40;\r\nconst OUTPUT_ROW_HEIGHT = 40;\r\n\r\nconst CustomNode = ({ data }) => {\r\n  const {\r\n    inputs = [],\r\n    label = '',\r\n    outputs = []\r\n  } = data;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'relative',\r\n        minWidth: '200px',\r\n      }}\r\n    >\r\n      {/* Semi-transparent background container */}\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          background: 'rgba(255, 255, 255, 0.8)', // Semi-transparent white\r\n          border: '1px solid #ccc',\r\n          borderRadius: '5px',\r\n          zIndex: -1, // Places it behind the handles\r\n        }}\r\n      />\r\n\r\n      {/* Content container with minimal spacing */}\r\n\t  \r\n\t  \r\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '2px' }}>\r\n        {/* Input Row - Modified with minWidth */}\r\n        {inputs.length > 0 && (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              gap: '2px',\r\n            }}\r\n          >\r\n            {inputs.map((input, index) => (\r\n              <div\r\n                key={index}\r\n                style={{\r\n                  position: 'relative',\r\n                  flex: 1,\r\n                  minWidth: '90px', // Added minimum width\r\n                  height: INPUT_BOX_HEIGHT,\r\n                  border: '1px solid #ccc',\r\n                  borderRadius: '3px',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  background: 'white',\r\n                }}\r\n              >\r\n                <Handle\r\n                  type=\"target\"\r\n                  position={Position.Top}\r\n                  id={`input-${index}`}\r\n                  style={{\r\n                    background: '#555',\r\n                    width: 8,\r\n                    height: 8,\r\n                    zIndex: 1,\r\n                  }}\r\n                />\r\n                <Typography variant=\"caption\" component=\"div\" align=\"center\">\r\n                  {`${input.resource}: ${Math.ceil(input.amount)}`} {/* Ceiling the number */}\r\n                </Typography>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {/* Center Row */}\r\n        <div\r\n          style={{\r\n            height: CENTER_ROW_HEIGHT,\r\n            border: '1px solid #ccc',\r\n            borderRadius: '3px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            background: 'white',\r\n          }}\r\n        >\r\n          <Typography variant=\"subtitle2\" component=\"div\">\r\n            {label}\r\n          </Typography>\r\n        </div>\r\n\r\n        {/* Output Row */}\r\n        <div\r\n          style={{\r\n            position: 'relative',\r\n            height: OUTPUT_ROW_HEIGHT,\r\n            border: '1px solid #ccc',\r\n            borderRadius: '3px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            background: 'white',\r\n          }}\r\n        >\r\n          <Typography variant=\"caption\" component=\"div\">\r\n            {outputs.map(output => \r\n              `${output.resource}: ${Math.ceil(output.amount)}`\r\n            ).join(', ')}\r\n          </Typography>\r\n          <Handle\r\n            type=\"source\"\r\n            position={Position.Bottom}\r\n            style={{\r\n              background: '#555',\r\n              width: 8,\r\n              height: 8,\r\n              zIndex: 1,\r\n            }}\r\n            isConnectable={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomNode;","import React, { useEffect, useCallback, useMemo } from 'react';\r\nimport ReactFlow, {\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n  Background,\r\n  Controls,\r\n  Position,\r\n  BezierEdge,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport { IconButton, Box } from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport dagre from 'dagre';\r\nimport ProductionNode from '../../components/ProductionNode'; // Import your custom node\r\n\r\nconst defaultEdgeOptions = {\r\n  type: BezierEdge,\r\n  style: { stroke: '#555' },\r\n  markerEnd: {\r\n    type: MarkerType.ArrowClosed,\r\n    color: '#888',\r\n  },\r\n};\r\n\r\n// Update nodeTypes to use your imported ProcessNode\r\nconst nodeTypes = {\r\n  processNode: ProductionNode,\r\n};\r\n\r\nconst ProductChainGraph = ({ \r\n  chain, \r\n  onClose, \r\n  calculateBuildings, \r\n  calculateAdjustedProduction, \r\n  globalBuff, \r\n  multipliers, \r\n  requiredAmounts,\r\n  selectedBuilding,\r\n  buildingCount,\r\n  buildingLevel,\r\n  totalBuildingLevels,\r\n  specificBuildingLevels,\r\n  calculationMode\r\n}) => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n\r\n  const getLayoutedElements = (nodes, edges, direction = 'TB') => {\r\n    const dagreGraph = new dagre.graphlib.Graph();\r\n    dagreGraph.setDefaultEdgeLabel(() => ({}));\r\n\r\n    // Adjust these values based on your ProcessNode dimensions\r\n    const nodeWidth = 200;  // Adjust based on your node's width\r\n    const nodeHeight = 150; // Adjust based on your node's height\r\n\r\n    dagreGraph.setGraph({ rankdir: direction });\r\n\r\n    nodes.forEach((node) => {\r\n      dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });\r\n    });\r\n\r\n    edges.forEach((edge) => {\r\n      dagreGraph.setEdge(edge.source, edge.target);\r\n    });\r\n\r\n    dagre.layout(dagreGraph);\r\n\r\n    return {\r\n      nodes: nodes.map((node) => {\r\n        const nodeWithPosition = dagreGraph.node(node.id);\r\n        return {\r\n          ...node,\r\n          position: {\r\n            x: nodeWithPosition.x - nodeWidth / 2,\r\n            y: nodeWithPosition.y - nodeHeight / 2,\r\n          },\r\n        };\r\n      }),\r\n      edges,\r\n    };\r\n  };\r\n\r\nconst createNodes = useMemo(() => {\r\n  return chain.map((item) => ({\r\n    id: item.id, // Use the unique ID directly (no need for additional index)\r\n    type: 'processNode',\r\n    data: { \r\n      label: `${item.name} (x${item.estimatedBuildings || 1})`,\r\n      inputs: item.input,\r\n      outputs: item.output,\r\n      requiredAmount: item.requiredLevels || 0,\r\n      originalId: item.buildingId, // Store the original building ID if needed\r\n    },\r\n    position: { x: 0, y: 0 },\r\n  }));\r\n}, [chain]);\r\n\r\n\r\nconst createEdges = useMemo(() => {\r\n  return chain\r\n    .filter(node => node.parentId)\r\n    .flatMap(node => {\r\n      // For each output of this node\r\n      return node.output.map((output, outputIndex) => {\r\n        // Find the parent node\r\n        const parent = chain.find(p => p.id === node.parentId);\r\n        if (!parent) return null;\r\n\r\n        // Find which input in the parent matches this output's resource\r\n        const parentInputIndex = parent.input.findIndex(\r\n          input => input.resource === output.resource\r\n        );\r\n\r\n        if (parentInputIndex === -1) return null;\r\n\r\n        return {\r\n          id: `e${node.id}-${node.parentId}-${output.resource}`,\r\n          source: node.id,\r\n          target: node.parentId,\r\n          sourceHandle: 'output', // Single output handle\r\n          targetHandle: `input-${parentInputIndex}`, // Specific input handle\r\n          sourcePosition: Position.Bottom,\r\n          targetPosition: Position.Top,\r\n          type: BezierEdge,\r\n          animated: false,\r\n          //label: `${output.resource}: ${output.amount.toFixed(1)}`,\r\n          style: {\r\n            stroke: '#777',\r\n            strokeWidth: '1.5px',\r\n          },\r\n          markerEnd: {\r\n            type: MarkerType.ArrowClosed,\r\n            color: '#888',\r\n          },\r\n        };\r\n      }).filter(Boolean); // Remove null entries\r\n    });\r\n}, [chain]);\r\n\r\n  useEffect(() => {\r\n    const { nodes: layoutedNodes, edges: layoutedEdges } = getLayoutedElements(createNodes, createEdges);\r\n    setNodes(layoutedNodes);\r\n    setEdges(layoutedEdges);\r\n  }, [chain, globalBuff, calculationMode, setNodes, setEdges]);\r\n\r\n  const onConnect = useCallback((params) => setEdges((eds) => [...eds, params]), [setEdges]);\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <IconButton\r\n        onClick={onClose}\r\n        sx={{\r\n          position: 'absolute',\r\n          top: '10px',\r\n          right: '10px',\r\n          zIndex: 10,\r\n          bgcolor: 'background.paper',\r\n          '&:hover': {\r\n            bgcolor: 'action.hover',\r\n          },\r\n        }}\r\n        aria-label=\"close\"\r\n      >\r\n        <CloseIcon />\r\n      </IconButton>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        nodeTypes={nodeTypes}\r\n        defaultEdgeOptions={defaultEdgeOptions}\r\n        fitView\r\n      >\r\n        <Background />\r\n        <Controls />\r\n      </ReactFlow>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProductChainGraph;","// src/components/Alert.js\r\nimport React from 'react';\r\nimport { Typography, Box } from '@mui/material';\r\n\r\nconst Alert = ({ title, description }) => {\r\n  return (\r\n    <Box sx={{ \r\n      mb: 4, \r\n      backgroundColor: '#fff3e0',  // Light yellow background\r\n      padding: 0,\r\n      borderRadius: 1\r\n    }}>\r\n      {title && (\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n      )}\r\n      {description && (\r\n        <Typography \r\n          variant=\"subtitle1\" \r\n          sx={{ \r\n            mb: 3, \r\n            fontStyle: 'italic',\r\n            color: 'text.secondary',\r\n            borderLeft: '4px solid',\r\n            borderColor: '#d32f2f',  // Red border\r\n            pl: 2\r\n          }}\r\n        >\r\n          {description}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Alert;","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { TextField, Select, MenuItem, Grid, Typography, Paper, Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Checkbox, FormControlLabel, Button } from '@mui/material';\r\nimport { \r\n  buildGraph, \r\n  calculateUniqueResourceFlow, \r\n  processChainData, \r\n  calculateBuildings, \r\n  calculateAdjustedProduction, \r\n  calculateSubtotal, \r\n  calculateDividedSubtotal, \r\n  calculateEstimatedOutput \r\n} from './productChainUtils';\r\nimport buildingsData from '../../data/buildingData.json';\r\nimport ProductChainGraph from './ProductChainGraph';\r\nimport { Modal } from '@mui/material';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport Alert from '../../components/Alert';\r\n\r\nconst PAGE_TITLE = \"Production Chain Calculator and Display\";\r\nconst PAGE_DESCRIPTION = \"This page allows you to see the breakdown of the production chain required to generate a good. Select the building you want to build and its dependencies will be calculated. Click on the 'Show Visual Graph' to see a visualization of the chain.\"\r\n\r\n\r\n\r\n\r\n\r\nconst ProductChainCalc = () => {\r\n\tconst [state, setState] = useState({\r\n\t\tselectedBuilding: '',\r\n\t\tchain: [],\r\n\t\tmultipliers: {},\r\n\t\tglobalBuff: 0,\r\n\t\tbuildingCount: '',\r\n\t\tbuildingLevel: '',\r\n\t\tspecificBuildingLevels: {},\r\n\t\ttotalBuildingLevels: null,  // Add this if you're using it\r\n\t\t});\r\n\tconst [showAllItems, setShowAllItems] = useState(false);\r\n\tconst [showGraph, setShowGraph] = useState(false);\r\n\tconst [graph, setGraph] = useState(null);\r\n\t\r\n\tuseEffect(() => \r\n\t{\r\n\t\tsetGraph(buildGraph(buildingsData));\r\n\t}, []);\r\n\r\nuseEffect(() => {\r\n  if (state.selectedBuilding && graph) {\r\n    const flow = calculateUniqueResourceFlow(\r\n      graph, \r\n      state.selectedBuilding, \r\n      state.multipliers, \r\n      state.globalBuff,\r\n      parseInt(state.buildingCount) || 1,\r\n      parseInt(state.buildingLevel) || 1,\r\n      state.specificBuildingLevels\r\n    );\r\n    const chainData = processChainData(flow, graph, state);\r\n    setState(prevState => ({ ...prevState, chain: chainData }));\r\n  }\r\n}, [\r\n  state.selectedBuilding, \r\n  state.multipliers, \r\n  graph, \r\n  state.globalBuff, \r\n  state.buildingCount, \r\n  state.buildingLevel, \r\n  state.specificBuildingLevels\r\n]);\r\n\r\n\r\n\tconst handleMultiplierChange = (buildingId, value) => {\r\n\t  \r\n\t  setState(prevState => ({\r\n\t\t...prevState,\r\n\t\tmultipliers: {\r\n\t\t  ...prevState.multipliers,\r\n\t\t  [buildingId]: value\r\n\t\t}\r\n\t  }));\r\n\t};\r\n\r\n  const sortedBuildings = useMemo(() => {\r\n    return [...buildingsData]\r\n      .filter(building => showAllItems || building.ev)\r\n      .sort((a, b) => a.name.localeCompare(b.name));\r\n  }, [showAllItems]);\r\n\r\n  const handleSpecificBuildingLevelChange = (buildingId, value) => {\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      specificBuildingLevels: {\r\n        ...prevState.specificBuildingLevels,\r\n        [buildingId]: value === '' ? null : parseInt(value)\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setState(prevState => ({ ...prevState, [field]: value }));\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={3} sx={{ p: 3, maxWidth: 1200, mx: 'auto' }}>\r\n      <PageHeader title={PAGE_TITLE} description={PAGE_DESCRIPTION} />\r\n\t  <Alert \r\n  title=\"Big Update!\" \r\n  description=\"This page has been dramatically overhauled with new logic and improved visualizations. Bugs are likely. Collapsing buildings is currently not implemented, but will be soon.\" \r\n\t/>\r\n      <Box sx={{ mb: 3 }}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item xs={12} sm={6}>\r\n            <Select\r\n              value={state.selectedBuilding}\r\n              onChange={(e) => handleInputChange('selectedBuilding', e.target.value)}\r\n              fullWidth\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>Select a building</em>\r\n              </MenuItem>\r\n              {sortedBuildings.map(building => (\r\n                <MenuItem key={building.id} value={building.id}>{building.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={showAllItems}\r\n                  onChange={(e) => setShowAllItems(e.target.checked)}\r\n                />\r\n              }\r\n              label=\"Show All Items\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              label=\"Main Building Count\"\r\n              type=\"number\"\r\n              value={state.buildingCount}\r\n              onChange={(e) => handleInputChange('buildingCount', e.target.value)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <TextField\r\n              label=\"Main Building Level\"\r\n              type=\"number\"\r\n              value={state.buildingLevel}\r\n              onChange={(e) => handleInputChange('buildingLevel', e.target.value)}\r\n              fullWidth\r\n              inputProps={{ min: \"0\", step: \"1\" }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n  label=\"Global Buff\"\r\n  type=\"number\"\r\n  value={state.globalBuff}\r\n  onChange={(e) => {\r\n    const value = Math.min(99, Math.max(0, parseInt(e.target.value) || 0));\r\n    handleInputChange('globalBuff', value);\r\n  }}\r\n  fullWidth\r\n  inputProps={{ \r\n    min: \"0\", \r\n    max: \"99\",\r\n    step: \"1\" \r\n  }}\r\n/>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      \r\n      {state.chain.length > 0 && (\r\n        <>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\" \r\n            onClick={() => setShowGraph(true)}\r\n            sx={{ mt: 2, mb: 2 }}\r\n          >\r\n            Show Visual Graph\r\n          </Button>\r\n          <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Building</TableCell>\r\n                  <TableCell>Input</TableCell>\r\n                  <TableCell>Output</TableCell>\r\n                  <TableCell>Building Specific Multiplier</TableCell>\r\n                  <TableCell>Specific Building Level</TableCell>\r\n                  <TableCell>Total Building Levels</TableCell>\r\n                  <TableCell>Estimated Buildings</TableCell>\r\n                \r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {state.chain.map((row) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell>{row.name}</TableCell>\r\n                    <TableCell style={{ whiteSpace: 'pre-line' }}>{row.input.map(i => `${i.resource}: ${i.amount.toFixed(0)}`).join('\\n')}</TableCell>\r\n                    <TableCell style={{ whiteSpace: 'pre-line' }}>{row.output.map(o => `${o.resource}: ${o.amount.toFixed(0)}`).join('\\n')}</TableCell>\r\n\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t  <TextField\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tvalue={state.multipliers[row.buildingId] ?? 1}  // Using nullish coalescing\r\n\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t  const value = Math.min(99, Math.max(1, parseFloat(e.target.value) || 1));\r\n\t\t\t\t\t\t  handleMultiplierChange(row.buildingId, value);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tinputProps={{ \r\n\t\t\t\t\t\t  min: \"1\", \r\n\t\t\t\t\t\t  max: \"99\",\r\n\t\t\t\t\t\t  step: \"1\", \r\n\t\t\t\t\t\t  style: { width: '80px' } \r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t  />\r\n\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t  <TextField\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tvalue={state.specificBuildingLevels[row.id] || ''}\r\n\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t  const value = e.target.value === '' ? '' : \r\n\t\t\t\t\t\t\tMath.min(99, Math.max(1, parseInt(e.target.value) || 1));\r\n\t\t\t\t\t\t  handleSpecificBuildingLevelChange(row.id, value);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tinputProps={{ \r\n\t\t\t\t\t\t  min: \"1\", \r\n\t\t\t\t\t\t  max: \"99\",\r\n\t\t\t\t\t\t  step: \"1\", \r\n\t\t\t\t\t\t  style: { width: '80px' } \r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t  />\r\n\t\t\t\t\t</TableCell>\r\n                    <TableCell>{row.requiredLevels.toFixed(0)}</TableCell>\r\n                    <TableCell>{row.estimatedBuildings}</TableCell>            \r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <Typography variant=\"subtitle1\">\r\n              {state.selectedBuilding && `${buildingsData.find(b => b.id === state.selectedBuilding)?.name} Estimated Output: ${calculateEstimatedOutput(state.chain.find(node => node.id === state.selectedBuilding), state)}`}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 2 }}>\r\n              <Typography variant=\"subtitle1\">\r\n                Total Building Levels (Est): {calculateSubtotal(state.chain, state)}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\">\r\n                Total Buildings (Est): {calculateDividedSubtotal(state.chain, state)}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </>\r\n      )}\r\n\r\n     <Modal\r\n  open={showGraph}\r\n  onClose={() => setShowGraph(false)}\r\n  aria-labelledby=\"product-chain-graph-modal\"\r\n  aria-describedby=\"product-chain-graph-description\"\r\n>\r\n  <Box sx={{\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '90%',\r\n    height: '90%',\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    p: 4,\r\n  }}>\r\n<ProductChainGraph \r\n  chain={state.chain}\r\n  onClose={() => setShowGraph(false)}\r\n  globalBuff={state.globalBuff}\r\n  multipliers={state.multipliers}\r\n  selectedBuilding={state.selectedBuilding}\r\n  buildingCount={parseInt(state.buildingCount) || 1}\r\n  buildingLevel={parseInt(state.buildingLevel) || 1}\r\n  specificBuildingLevels={state.specificBuildingLevels}\r\n/>\r\n  </Box>\r\n</Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ProductChainCalc;"],"names":["_ref","title","description","_jsxs","Box","sx","mb","children","_jsx","Typography","variant","gutterBottom","fontStyle","color","borderLeft","borderColor","pl","getBuildingLevels","state","totalBuildingLevels","buildingCount","buildingLevel","calculateSubtotal","chain","Math","ceil","reduce","sum","node","requiredAmount","calculateDividedSubtotal","subtotal","divisor","calculateEstimatedOutput","selectedNode","buildingMultiplier","min","max","multipliers","id","globalBuff","data","inputs","label","outputs","style","position","minWidth","top","left","right","bottom","background","border","borderRadius","zIndex","display","flexDirection","gap","length","justifyContent","map","input","index","flex","height","alignItems","Handle","type","Position","Top","width","component","align","resource","amount","output","join","Bottom","isConnectable","defaultEdgeOptions","BezierEdge","stroke","markerEnd","MarkerType","ArrowClosed","nodeTypes","processNode","ProductionNode","onClose","calculateBuildings","calculateAdjustedProduction","requiredAmounts","selectedBuilding","specificBuildingLevels","calculationMode","nodes","setNodes","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","createNodes","useMemo","item","name","estimatedBuildings","requiredLevels","originalId","buildingId","x","y","createEdges","filter","parentId","flatMap","outputIndex","parent","find","p","parentInputIndex","findIndex","source","target","sourceHandle","targetHandle","sourcePosition","targetPosition","animated","strokeWidth","Boolean","useEffect","layoutedNodes","layoutedEdges","direction","arguments","undefined","dagreGraph","dagre","Graph","setDefaultEdgeLabel","setGraph","rankdir","forEach","setNode","edge","setEdge","nodeWithPosition","nodeWidth","nodeHeight","getLayoutedElements","onConnect","useCallback","params","eds","IconButton","onClick","bgcolor","CloseIcon","ReactFlow","fitView","Background","Controls","backgroundColor","padding","ProductChainCalc","_buildingsData$find","setState","useState","showAllItems","setShowAllItems","showGraph","setShowGraph","graph","Map","buildingsData","building","flow","result","queue","visited","calculateRequiredInput","_multipliers$building","_multipliers$currentB","currentBuildingId","pathIndex","shift","uniqueNodeId","has","set","get","outputAmounts","Object","entries","inputAmounts","_ref2","multiplier","push","childPathIndex","_ref3","inputBuilding","Array","from","values","b","keys","includes","inputRequiredLevels","calculateUniqueResourceFlow","parseInt","chainData","_state$multipliers$no","isSelectedBuilding","outputPerLevel","totalOutput","processChainData","prevState","sortedBuildings","ev","sort","a","localeCompare","handleInputChange","field","value","Paper","elevation","maxWidth","mx","PageHeader","Alert","Grid","container","spacing","xs","sm","Select","onChange","e","fullWidth","MenuItem","FormControlLabel","control","Checkbox","checked","TextField","inputProps","step","_Fragment","Button","mt","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","row","_state$multipliers$ro","whiteSpace","i","toFixed","o","parseFloat","handleMultiplierChange","handleSpecificBuildingLevelChange","Modal","open","transform","boxShadow","ProductChainGraph"],"sourceRoot":""}